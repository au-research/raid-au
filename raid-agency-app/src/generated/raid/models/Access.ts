/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccessStatement } from './AccessStatement';
import {
    AccessStatementFromJSON,
    AccessStatementFromJSONTyped,
    AccessStatementToJSON,
    AccessStatementToJSONTyped,
} from './AccessStatement';
import type { AccessType } from './AccessType';
import {
    AccessTypeFromJSON,
    AccessTypeFromJSONTyped,
    AccessTypeToJSON,
    AccessTypeToJSONTyped,
} from './AccessType';

/**
 * 
 * @export
 * @interface Access
 */
export interface Access {
    /**
     * 
     * @type {AccessType}
     * @memberof Access
     */
    type: AccessType;
    /**
     * 
     * @type {AccessStatement}
     * @memberof Access
     */
    statement?: AccessStatement;
    /**
     * Date the embargo on access to the RAiD ends. Year
     * @type {Date}
     * @memberof Access
     */
    embargoExpiry?: Date;
}

/**
 * Check if a given object implements the Access interface.
 */
export function instanceOfAccess(value: object): value is Access {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function AccessFromJSON(json: any): Access {
    return AccessFromJSONTyped(json, false);
}

export function AccessFromJSONTyped(json: any, ignoreDiscriminator: boolean): Access {
    if (json == null) {
        return json;
    }
    return {
        
        'type': AccessTypeFromJSON(json['type']),
        'statement': json['statement'] == null ? undefined : AccessStatementFromJSON(json['statement']),
        'embargoExpiry': json['embargoExpiry'] == null ? undefined : (new Date(json['embargoExpiry'])),
    };
}

  export function AccessToJSON(json: any): Access {
      return AccessToJSONTyped(json, false);
  }

  export function AccessToJSONTyped(value?: Access | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': AccessTypeToJSON(value['type']),
        'statement': AccessStatementToJSON(value['statement']),
        'embargoExpiry': value['embargoExpiry'] == null ? undefined : ((value['embargoExpiry']).toISOString().substring(0,10)),
    };
}

