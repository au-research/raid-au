name: CI
on:
  pull_request:
  push:
    branches:
    - main    
    paths-ignore:
      # don't need doc updates to do a rebuild, it's a waste of build minutes   
      - '**.md'
    
# 1 job for the moment - parallelisation won't buy us anything for a while,
# wait until we get a bit more code. When we have a client-build, that might
# make sense to be a separate job in it's own parallel runner.      
jobs:
  api-svc-build:
    name: "api-svc"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: raido
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: githubActionIntTestPgPassword
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      # Corretto is the Raido standard JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      # https://github.com/gradle/gradle-build-action
      # setup and execute steps here were copied from readme
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build and unit test
        run: ./gradlew build            

      - name: Create and populate api-svc-db.gradle
        # running the api-svc as the admin user is not good
        # it should run as the api_user, but I don't know how to sort out
        # the password.
        run: |
          mkdir -p ~/.config/raido-v2/
          
          cat <<EOF > ~/.config/raido-v2/api-svc-db.gradle
          apiSvcPgUrl="jdbc:postgresql://localhost:5432/raido"
          apiSvcPgUser="postgres"
          apiSvcPgPassword="githubActionIntTestPgPassword"
          apiSvcDbPassword="githubActionIntTestDbPassword"
          EOF

          echo "cat api-svc-db.gradle"
          cat ~/.config/raido-v2/api-svc-db.gradle

      # requires api-svc-db.gradle to be populated
      - name: Create DB schemata
        run: ./gradlew flywayMigrate

      - name: Create and populate api-svc-env.properties
        env:
          APIDS_JWT_SECRET: ${{ secrets.APIDS_DEMO_JWT_SECRET }}
        run: |
          mkdir -p ~/.config/raido-v2/

          cat <<EOF > ~/.config/raido-v2/api-svc-env.properties
          DatasourceConfig.url=jdbc:p6spy:postgresql://localhost:5432/raido
          DatasourceConfig.username=api_user
          DatasourceConfig.password=githubActionIntTestDbPassword
          RaidV1Auth.jwtSecret=githubActionIntTestJwtSecret
          RaidV2Auth.jwtSecrets=githubActionIntTestJwtSecretMustBeReallyLong

          AafOidc.clientSecret=notTheRealSecret
          GoogleOidc.clientSecret=notTheRealSecret

          Apids.secret=$APIDS_JWT_SECRET
          EOF

          # commented out to protect secrets
          # Github redacts secrets that it recognises anyway, but still.
          # echo "cat api-svc-env.properties"
          # cat ~/.config/raido-v2/api-svc-env.properties

      # requires api-svc-env.properties to be populated
      - name: Run integration tests
        run: ./gradlew intTest

      # https://github.com/marketplace/actions/test-reporter
      - name: Reporting
        uses: dorny/test-reporter@v1
        if: always()
        with:
          ## this shows up in Github UI under "jobs" but it's not one
          name: Unit and Integrations tests
          path: '**/build/test-results/**/*.xml'
          reporter: java-junit
          fail-on-error: true