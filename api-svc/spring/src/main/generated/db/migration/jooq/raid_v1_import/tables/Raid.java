/*
 * This file is generated by jOOQ.
 */
package db.migration.jooq.raid_v1_import.tables;


import db.migration.jooq.raid_v1_import.Keys;
import db.migration.jooq.raid_v1_import.RaidV1Import;
import db.migration.jooq.raid_v1_import.tables.records.RaidRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * imported from RAiD-RAiDLiveDB-1SX7NYTSOSUKX-RAiDTable-1PO1W2ASWY0OV
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Raid extends TableImpl<RaidRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>raid_v1_import.raid</code>
     */
    public static final Raid RAID = new Raid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidRecord> getRecordType() {
        return RaidRecord.class;
    }

    /**
     * The column <code>raid_v1_import.raid.handle</code>.
     */
    public final TableField<RaidRecord, String> HANDLE = createField(DSL.name("handle"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.owner</code>.
     */
    public final TableField<RaidRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.content_path</code>.
     */
    public final TableField<RaidRecord, String> CONTENT_PATH = createField(DSL.name("content_path"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.content_index</code>.
     */
    public final TableField<RaidRecord, String> CONTENT_INDEX = createField(DSL.name("content_index"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.name</code>.
     */
    public final TableField<RaidRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.description</code>.
     */
    public final TableField<RaidRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.start_date</code>.
     */
    public final TableField<RaidRecord, LocalDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.creation_date</code>.
     */
    public final TableField<RaidRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>raid_v1_import.raid.s3_export</code>.
     */
    public final TableField<RaidRecord, JSONB> S3_EXPORT = createField(DSL.name("s3_export"), SQLDataType.JSONB.nullable(false), this, "");

    private Raid(Name alias, Table<RaidRecord> aliased) {
        this(alias, aliased, null);
    }

    private Raid(Name alias, Table<RaidRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("imported from RAiD-RAiDLiveDB-1SX7NYTSOSUKX-RAiDTable-1PO1W2ASWY0OV"), TableOptions.table());
    }

    /**
     * Create an aliased <code>raid_v1_import.raid</code> table reference
     */
    public Raid(String alias) {
        this(DSL.name(alias), RAID);
    }

    /**
     * Create an aliased <code>raid_v1_import.raid</code> table reference
     */
    public Raid(Name alias) {
        this(alias, RAID);
    }

    /**
     * Create a <code>raid_v1_import.raid</code> table reference
     */
    public Raid() {
        this(DSL.name("raid"), null);
    }

    public <O extends Record> Raid(Table<O> child, ForeignKey<O, RaidRecord> key) {
        super(child, key, RAID);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RaidV1Import.RAID_V1_IMPORT;
    }

    @Override
    public UniqueKey<RaidRecord> getPrimaryKey() {
        return Keys.RAID_PKEY;
    }

    @Override
    public Raid as(String alias) {
        return new Raid(DSL.name(alias), this);
    }

    @Override
    public Raid as(Name alias) {
        return new Raid(alias, this);
    }

    @Override
    public Raid as(Table<?> alias) {
        return new Raid(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Raid rename(String name) {
        return new Raid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Raid rename(Name name) {
        return new Raid(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Raid rename(Table<?> name) {
        return new Raid(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, LocalDateTime, LocalDateTime, JSONB> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super JSONB, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super JSONB, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
