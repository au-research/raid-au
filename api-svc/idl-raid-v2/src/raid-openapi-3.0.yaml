openapi: 3.0.3
servers:
  - url: 'https://demo.raido-infra.com'
  - url: 'https://test.raido-infra.com'
  - url: 'http://localhost:8080'
info:
  title: RAID v2 API
  version: 2.0.0
  contact:
    name: ARDC RAiD team
    email: web.services@ardc.edu.au
tags:
  - name: public-experimental
    description: The APIs are not stable, they may change at any time.  
      Can be called without auth.
  - name: raido-experimental
    description: The APIs are not stable, they may change at any time.
      These endpoints are intended to be called by the Raido UI.
      Must be called with auth.
security:
  # without this, or if you override with `[]`, no header will be sent
  # by the openapi generated code
  - BearerAuth:
    # Mandatory, but I don't know what the content is supposed to be?    
    - unknown
      
paths:

  #### public endpoints (signing in and requesting authz, etc.) ####
  
  /v2/public/version:
    get:
      security: []
      tags:
        - public-experimental
      operationId: version
      summary: get info about server
      responses:
        '200':
          description: version info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResult'
  /v2/public/list-service-point/v1:
    get:
      security: []
      tags:
        - public-experimental
      operationId: list-public-service-point
      summary: list service point data that un-authn users can see
      responses:
        '200':
          description: public service-point data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicServicePoint'
  /v2/public/request-authz/v1:
    post:
      tags:
        - public-experimental
      operationId: update-request-authz
      summary: create or update an authz request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthzRequest'
      responses:
        '200':
          description: result of request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAuthzResponse'
  
  
  #### Basic RAID endpoints ####
  
  /v2/experimental/list-raid/v1:
    $ref: "basic-raid.yaml#/paths/~1list-raid"
  /v2/experimental/mint-raid/v1:
    $ref: "basic-raid.yaml#/paths/~1mint-raid-v1"


  #### Admin endpoints ####
                
  /v2/public/request-authz/v1/{authzRequestId}:
    $ref: "admin.yaml#/paths/~1read-request-authz"
  /v2/experimental/update-authz-request-status/v1:
    $ref: "admin.yaml#/paths/~1update-authz-request-status"
  /v2/experimental/admin-authz-request/v1:
    $ref: "admin.yaml#/paths/~1list-authz-request"
  /v2/experimental/service-point/v1:
    $ref: "admin.yaml#/paths/~1list-service-point"
  /v2/experimental/service-point/v1/{servicePointId}:
    $ref: "admin.yaml#/paths/~1read-service-point"
  /v2/experimental/service-point/v1/{servicePointId}/list-app-user:
    $ref: "admin.yaml#/paths/~1list-app-user"
  /v2/experimental/app-user/v1:
    $ref: "admin.yaml#/paths/~1update-app-user"
  /v2/experimental/app-user/v1/{appUserId}:
    $ref: "admin.yaml#/paths/~1read-app-user"
  /v2/experimental/service-point/v1/{servicePointId}/list-api-key:
    $ref: "admin.yaml#/paths/~1list-api-key"
  /v2/experimental/api-key/v1:
    $ref: "admin.yaml#/paths/~1update-api-key"
  /v2/experimental/api-key/v1/{apiKeyId}:
    $ref: "admin.yaml#/paths/~1read-api-key"
  /v2/experimental/app-user-extra/v1/{appUserId}:
    $ref: "admin.yaml#/paths/~1read-app-user-extra"
  /v2/experimental/generate-api-token/v1:
    $ref: "admin.yaml#/paths/~1generate-api-token"


components:
  schemas:
    VersionResult:
      type: object
      properties:
        buildVersion: {type: string}
        buildCommitId: {type: string}
        buildDate: { type: string }
        startDate: { type: string, format: date-time }
    PublicServicePoint:
      description: data that non-authn users can see (do not leak email)
      type: object
      required: [id, name]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        name: {type: string}
    UpdateAuthzRequest:
      description: authorization request
      type: object
      required: [servicePointId, name]
      properties:
        servicePointId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        comments: {type: string}
    # would be nice to do an "any-of" type spec that generates an enum on the 
    # TS side - not sure OAS spec and the tooling supports it yet?
    UpdateAuthzResponse:
      type: object
      required: [status]
      properties:
        status: {$ref: 'admin.yaml#/components/schemas/AuthzRequestStatus' }
        
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
