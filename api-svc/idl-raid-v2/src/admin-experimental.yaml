openapi: 3.0.3
info:
  title: administration endpoints
  version: 1.0.0
  description: >
    Contains a bunch of experimental API endpoints used to manage 
    service-points, users, etc.
    
paths:
  /read-request-authz:
    get:
      tags:
        - admin-experimental
      operationId: read-request-authz
      summary: read authz request
      parameters:
        - in: path
          name: authzRequestId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the AuthzRequest to get
      responses:
        '200':
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthzRequestExtraV1'
  /update-authz-request-status:
    post:
      tags:
        - admin-experimental
      operationId: update-authz-request-status
      summary: update a request to change its status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthzRequestStatus'
      responses:
        '200':
          description: succeeded
  /list-authz-request:
    get:
      tags:
        - admin-experimental
      operationId: list-authz-request
      summary: list authz requests for all SP
      responses:
        '200':
          description: result data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthzRequestExtraV1'
  /service-point:
    get:
      tags:
        - admin-experimental
      operationId: list-service-point
      summary: list service point data that authorized users can see
      responses:
        '200':
          description: all service-point data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePoint'
    post:
      tags:
        - admin-experimental
      operationId: update-service-point
      summary: update a service point, create a new one if id not set
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePoint'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePoint'
  /read-service-point:
    get:
      tags:
        - admin-experimental
      operationId: read-service-point
      summary: read service point data that authorized users can see
      parameters:
        - in: path
          name: servicePointId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the ServicePoint to get
      responses:
        '200':
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePoint'
  /list-app-user:
    get:
      tags:
        - admin-experimental
      operationId: list-app-user
      summary: list app user data for service point that authz users can see
      parameters:
        - in: path
          name: servicePointId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the ServicePoint to list users for
      responses:
        '200':
          description: app-user data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
  /update-app-user:
    post:
      tags:
        - admin-experimental
      operationId: update-app-user
      summary: update an "user" type app-user (i.e. not an api-key)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
  /read-app-user:
    get:
      tags:
        - admin-experimental
      operationId: read-app-user
      summary: read app user data that authorized users can see
      parameters:
        - in: path
          name: appUserId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the AppUser to get
      responses:
        '200':
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'                
  /list-api-key:
    get:
      tags:
        - admin-experimental
      operationId: list-api-key
      summary: list app user data that are for keys
      parameters:
        - in: path
          name: servicePointId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the ServicePoint to list keys for
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
  /update-api-key:
    post:
      tags:
        - admin-experimental
      operationId: update-api-key
      summary: >
        update an "api-key" type app-user (i.e. not a "person type" user), 
        create a new one if id not set 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
  /read-api-key:
    get:
      tags:
        - admin-experimental
      operationId: read-api-key
      summary: read app user "api key" data that authorized users can see
      parameters:
        - in: path
          name: apiKeyId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the AppUser to get
      responses:
        '200':
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey' 
  /read-app-user-extra:
    get:
      tags:
        - admin-experimental
      operationId: read-app-user-extra
      summary: read app user data and extra stuff
      parameters:
        - in: path
          name: appUserId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the AppUser to get
      responses:
        '200':
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUserExtraV1'
  /generate-api-token:
    post:
      tags:
        - admin-experimental
      operationId: generate-api-token
      summary: generate api token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateApiTokenRequest'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateApiTokenResponse'
                
components:
  schemas:
    ApiKey:
      type: object
      description: >
        It's really an "AppUser", but modelling like this makes the API clearer
        and the client easier to write.
      required: [
        id, servicePointId, subject, idProvider,
        enabled, role, dateCreated
      ]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        servicePointId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        subject: {type: string}
        idProvider: {type: string}
        role: {type: string}
        enabled: {type: boolean}
        tokenCutoff: { type: string, format: date-time }
        dateCreated: { type: string, format: date-time }
    AppUser:
      type: object
      required: [
        id, servicePointId,
        email, clientId, idProvider, subject,
        enabled, role, dateCreated
      ]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        servicePointId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        email: {type: string}
        clientId: {type: string}
        subject: {type: string}
        idProvider: {type: string}
        role: {type: string}
        enabled: {type: boolean}
        tokenCutoff: { type: string, format: date-time }
        dateCreated: { type: string, format: date-time }
    AuthzRequestExtraV1:
      description: authorization request with extra data
      type: object
      required: [
        id, status, servicePointId, servicePointName,
        email, clientId, idProvider, subject,
        dateRequested
      ]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        status: {$ref: '#/components/schemas/AuthzRequestStatus' }
        servicePointId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        servicePointName: {type: string}
        comments: {type: string}
        email: {type: string}
        clientId: {type: string}
        idProvider: {type: string}
        subject: {type: string}
        respondingUserId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        respondingUserEmail: {type: string}
        dateRequested: { type: string, format: date-time }
        dateResponded: { type: string, format: date-time }
    AuthzRequestStatus:
      type: string
      enum: ['APPROVED', 'REQUESTED', 'REJECTED']
    UpdateAuthzRequestStatus:
      description: approve/reject a request, role is not set if rejecting.
      type: object
      required: [authzRequestId, status]
      properties:
        authzRequestId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        status: {$ref: 'AuthzRequestStatus' }
        role: {type: string}
    ServicePoint:
      description: data that any member of service-point and operators can see
      type: object
      required: [id, name, identifierOwner, adminEmail, techEmail, enabled]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        name: {type: string}
        identifierOwner: { type: string }
        searchContent: {type: string}
        techEmail: {type: string}
        adminEmail: {type: string}
        enabled: {type: boolean}
    AppUserExtraV1:
      type: object
      required: [appUser, servicePoint]
      description: bootstrapped users have no authzRequest or approvingUser
      properties:
        appUser: {$ref: '#/components/schemas/AppUser' }
        servicePoint: {$ref: '#/components/schemas/ServicePoint' }
        authzRequest: {$ref: '#/components/schemas/AuthzRequestExtraV1' }
    GenerateApiTokenRequest:
      type: object
      required: [apiKeyId]
      properties:
        apiKeyId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
    GenerateApiTokenResponse:
      type: object
      required: [apiKeyId]
      properties:
        apiKeyId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        apiToken: {type: string}
