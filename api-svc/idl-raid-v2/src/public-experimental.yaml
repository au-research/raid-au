openapi: 3.0.3
info:
  title: public endpoints, these can be called anonymously
  version: 1.0.0
paths:
  /version:
    get:
      security: []
      tags:
        - public-experimental
      operationId: version
      summary: get info about server
      responses:
        '200':
          description: version info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResult'
  /public-list-service-point:
    get:
      security: []
      tags:
        - public-experimental
      operationId: public-list-service-point
      summary: list service point data that un-authn users can see
      responses:
        '200':
          description: public service-point data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicServicePoint'
  /public-read-raid:
    get:
      security: []
      tags:
        - public-experimental
      operationId: public-read-raid
      summary: >
        read raid data, anybody can call this but it might not return useful
        info, RAiD may be confidential or embargoed
      parameters:
        - in: path
          name: handle
          schema: { type: string }
          required: true
          description: handle
      responses:
        '200':
          description: result of request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicReadRaidResponseV1'
  /public-read-raid-v2:
    get:
      security: []
      tags:
        - public-experimental
      operationId: public-read-raid-v2
      summary: >
        read raid data, anybody can call this but it might not return useful
        info, RAiD may be confidential or embargoed
      parameters:
        - in: path
          name: handle
          schema: { type: string }
          required: true
          description: handle
      responses:
        '200':
          description: result of request
          content:
#            text/html:
#              schema:
#                type: object 
            application/json:
              # would have preferred to use "oneOf PublicReadResponse or 
              # ClosedResponse", but though openapi generated appropriate code
              # (an abstract base class and two concrete implementations) 
              # open-feign failed with "InvalidDefinitionException: Cannot
              # construct instance of AbstractBaseClass"
              schema:
                  $ref: '#/components/schemas/PublicReadRaidResponseV2'


components:
  schemas:
    VersionResult:
      type: object
      properties:
        buildVersion: {type: string}
        buildCommitId: {type: string}
        buildDate: { type: string }
        startDate: { type: string, format: date-time }
    PublicServicePoint:
      description: data that non-authn users can see (do not leak email)
      type: object
      required: [id, name]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        name: {type: string}
    PublicReadRaidResponseV1:
      type: object
      required: [handle, url, createDate, confidential]
      description: >
        ownerName is the name of the service point that owns the raid
      properties:
        handle: {type: string}
        servicePointId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        servicePointName: {type: string}
        name: {type: string}
        startDate: { type: string, format: date-time }
        createDate: { type: string, format: date-time }
        url: {type: string}
        metadataEnvelopeSchema: {type: string}
        metadata: {type: object}
        confidential: {type: boolean}
    PublicReadRaidResponseV2:
      type: object
      required: [
        handle, metadataEnvelopeSchema, metadata, createDate, ]
      properties:
        servicePointId: { $ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        servicePointName: { type: string }
        createDate: { type: string, format: date-time }
        metadata: { type: object }
