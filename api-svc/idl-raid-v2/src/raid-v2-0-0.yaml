openapi: 3.0.3
servers:
  - url: 'https://demo.raido-infra.com'
  - url: 'https://test.raido-infra.com'
  - url: 'http://localhost:8080'
info:
  title: RAID v2 API
  version: 2.0.0
  contact:
    name: ARDC RAiD team
    email: web.services@ardc.edu.au
tags:
  - name: public-experimental
    description: The APIs are not stable, they may change at any time.  
      Can be called without auth.
  - name: raido-experimental
    description: The APIs are not stable, they may change at any time.
      These endpoints are intended to be called by the Raido UI.
      Must be called with auth.
security:
  # without this, or if you override with `[]`, no header will be sent
  # by the openapi generated code
  - BearerAuth:
    # Mandatory, but I don't know what the content is supposed to be?    
    - unknown
      
paths:
  /v2/public/version:
    get:
      security: []
      tags:
        - public-experimental
      operationId: version
      summary: get info about server
      responses:
        '200':
          description: version info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResult'
  /v2/public/list-service-point/v1:
    get:
      security: []
      tags:
        - public-experimental
      operationId: list-public-service-point
      summary: list service point data that un-authn users can see
      responses:
        '200':
          description: public service-point data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicServicePoint'
  /v2/public/request-authz/v1:
    post:
      tags:
        - public-experimental
      operationId: update-request-authz
      summary: create or update an authz request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthzRequest'
      responses:
        '200':
          description: result of request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAuthzResponse'
  /v2/public/request-authz/v1/{authzRequestId}:
    get:
      tags:
        - admin-experimental
      operationId: read-request-authz
      summary: read authz request
      parameters:
        - in: path
          name: authzRequestId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the AuthzRequest to get        
      responses:
        '200':
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthzRequest'          
  /v2/experimental/raido-keepme/v1:
    get:
      tags:
        - raido-experimental
      operationId: raido-keepme
      summary: >
        temporary endpoint to ensure the RaidoExperimental API is generated
      responses:
        '200':
          description: success

  /v2/experimental/update-authz-request-status/v1:
    post:
      tags:
        - admin-experimental
      operationId: update-authz-request-status
      summary: udpate a request to change its status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthzRequestStatus'
      responses:
        '200':
          description: succeeded
  /v2/experimental/admin-authz-request/v1:
    get:
      tags:
        - admin-experimental
      operationId: list-authz-request
      summary: list authz requests for all SP
      responses:
        '200':
          description: result data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthzRequest'
  /v2/experimental/service-point/v1:
    get:
      tags:
        - admin-experimental
      operationId: list-service-point
      summary: list service point data that authz'd users can see
      responses:
        '200':
          description: all service-point data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePoint'
    post:
      tags:
        - admin-experimental
      operationId: update-service-point
      summary: update a new service point, create a new one if id not set
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePoint'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePoint'
  /v2/experimental/service-point/v1/{servicePointId}:
    get:
      tags:
        - admin-experimental
      operationId: read-service-point
      summary: read service point data that authorized users can see
      parameters:
        - in: path
          name: servicePointId
          schema:
            $ref: 'shared.yaml#/components/schemas/SurrogateKey'
          required: true
          description: Numeric ID of the ServicePoint to get
      responses:
        '200':
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePoint'

components:
  schemas:
    VersionResult:
      type: object
      properties:
        buildVersion: {type: string}
        buildCommitId: {type: string}
        buildDate: { type: string }
        startDate: { type: string, format: date-time }
    V1Institution:
      description: >
        "v1" meaning "relating to V1 API", not "V1 of this object"
      type: object
      required: [id, name]
      properties:
        id: {type: string}
        name: {type: string}
    PublicServicePoint:
      description: data that non-authn users can see (do not leak email)
      type: object
      required: [id, name]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        name: {type: string}
    ServicePoint:
      description: data that any member of service-point and operators can see
      type: object
      required: [id, name, adminEmail, techEmail, enabled]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        name: {type: string}
        searchContent: {type: string}
        techEmail: {type: string}
        adminEmail: {type: string}
        enabled: {type: boolean}
    UpdateAuthzRequest:
      description: authorization request
      type: object
      required: [servicePointId, name]
      properties:
        servicePointId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        comments: {type: string}
    UpdateAuthzRequestStatus:
      description: approve/reject a reqeust
      type: object
      required: [authzRequestId, status]
      properties:
        authzRequestId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        status: {$ref: 'AuthzRequestStatus' }
    AuthzRequest:
      description: authorization request
      type: object
      required: [
        id, status, servicePointId, servicePointName, 
        email, client_id, id_provider, subject,
        dateRequested
      ]
      properties:
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        status: {$ref: '#/components/schemas/AuthzRequestStatus' }
        servicePointId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        servicePointName: {type: string}
        comments: {type: string}
        email: {type: string}
        clientId: {type: string}
        idProvider: {type: string}
        subject: {type: string}
        respondingUserId: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        respondingUserEmail: {type: string}
        dateRequested: { type: string, format: date-time }
        dateResponded: { type: string, format: date-time }
    # would be nice to do an "any-of" type spec that generates an enum on the 
    # TS side - not sure OAS spec and the tooling supports it yet?
    UpdateAuthzResponse:
      type: object
      required: [status]
      properties:
        status: {$ref: '#/components/schemas/AuthzRequestStatus' }
    AuthzRequestStatus:
        type: string
        enum: ['APPROVED', 'REQUESTED', 'REJECTED']
    AppUser:
      type: object
      properties: 
        id: {$ref: 'shared.yaml#/components/schemas/SurrogateKey' }
        email: {type: string}
        role: {type: string}
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
