openapi: 3.0.3

servers:
  - url: 'https://api.prod.raid.org.au'
    description: The production service - "PROD".
  - url: 'https://api.demo.raid.org.au'
    description: >
      DEMO environment, used for client integration testing and 
      customer demonstrations.
  - url: 'https://api.test.raid.org.au'
    description: >
      dev environment, used for developer integration testing.
  - url: 'http://localhost:8080'
    description: Local development.
    
info:
  title: RAID v2 API
  version: 2.0.0
  description: >
    This file is where all the endpoint paths are defined, it's the "top level'
    of the OpenAPI definition that links all the different files together.
    The `3.0` in the filename refers to this file being based on OpenAPI 3.0 
    as opposed to OpenAPI 3.1, which the tooling doesn't support yet.
    The `2.0.0` in the version field refers to the fact that there's already 
    a `1.0.0` used for the legacy RAiD application (not used in this project, 
    see ../idl-raid-v1).
    Note that swagger ui doesn't currently work with our spec, 
    see https://github.com/swagger-api/swagger-ui/issues/7724
    But the spec works fine with openapi-generator tooling.

  contact:
    name: ARDC RAiD team
    email: contact@raid.org
  termsOfService: https://github.com/au-research/raido/blob/main/doc/service-level-guide.md
tags:
  - name: public-experimental
    description: The APIs are not stable, they may change at any time.  
      Can be called without auth.
  - name: public-stable
    description: >
      The APIs are stable and will be supported in to the future,
      as per the service-level-guide.  
      Can be called without auth.
  - name: basic-raid-experimental
    description: The APIs are not stable, they may change at any time.
      These endpoints are intended to be called by the Raido UI.
      Must be called with auth.
  - name: basic-raid-stable
    description: Stable APIs.
security:
  - bearerAuth: []

paths:

  # region public endpoints (signing in and requesting authz, etc.)

  /v2/public/version:
    $ref: "public-experimental.yaml#/paths/~1version"
  /v2/public/list-service-point/v1:
    $ref: "public-experimental.yaml#/paths/~1public-list-service-point"
  /v2/public/handle/v3/{handle}:
    $ref: "public-experimental.yaml#/paths/~1public-read-raid-v3"

  # endregion
  
  
  # region unapproved-user endpoints 
  
  /v2/public/authz-request/v1:
    $ref: "unapproved-user-experimental.yaml#/paths/~1update-authz-request"

  # endregion


  # region Basic Raido raid endpoints
  
  /v2/experimental/mint-raido-schema/v1:
    $ref: "raido-metadata-schema.yaml#/paths/~1mint-raido-schema-v1"
  /v2/experimental/update-raido-schema/v2:
    $ref: "raido-metadata-schema.yaml#/paths/~1update-raido-schema-v2"
  /v2/experimental/update-raido-schema/v1:
    $ref: "raido-metadata-schema.yaml#/paths/~1update-raido-schema-v1"
  /v2/experimental/read-raid/v2:
    $ref: "raido-metadata-schema.yaml#/paths/~1read-raid-v2"
  /v2/experimental/list-raid/v2:
    $ref: "raido-metadata-schema.yaml#/paths/~1list-raid-v2"
  /v2/experimental/list-raid/v3:
    $ref: "raido-metadata-schema.yaml#/paths/~1list-raid-v3"
  /v2/experimental/migrate-legacy-raid/v1:
    $ref: "raido-metadata-schema.yaml#/paths/~1migrate-legacy-raid"
  /v2/experimental/upgrade-legacy-to-raido-schema/v1:
    $ref: "raido-metadata-schema.yaml#/paths/~1upgrade-legacy-to-raido-schema"
      
  # endregion

  # region Basic Raido raid endpoints
  /raid:
    $ref: "raido-stable-v1.yaml#/paths/~1raid"
  /raid/{prefix}/{suffix}:
    $ref: "raido-stable-v1.yaml#/paths/~1raid~1{prefix}~1{suffix}"

  # endregion

  # region Admin endpoints
            
  # IMPROVE: `/v2/public/` is wrong, this is an authorised endpoint  
  # Should be under /v2/experimental/              
  /v2/public/request-authz/v1/{authzRequestId}:
    $ref: "admin-experimental.yaml#/paths/~1read-request-authz"
  /v2/experimental/update-authz-request-status/v1:
    $ref: "admin-experimental.yaml#/paths/~1update-authz-request-status"
  /v2/experimental/admin-authz-request/v1:
    $ref: "admin-experimental.yaml#/paths/~1list-authz-request"
  /v2/experimental/service-point/v1:
    $ref: "admin-experimental.yaml#/paths/~1service-point"
  /v2/experimental/service-point/v1/{servicePointId}:
    $ref: "admin-experimental.yaml#/paths/~1read-service-point"
  /v2/experimental/service-point/v1/{servicePointId}/list-app-user:
    $ref: "admin-experimental.yaml#/paths/~1list-app-user"
  /v2/experimental/app-user/v1:
    $ref: "admin-experimental.yaml#/paths/~1update-app-user"
  /v2/experimental/app-user/v1/{appUserId}:
    $ref: "admin-experimental.yaml#/paths/~1read-app-user"
  /v2/experimental/service-point/v1/{servicePointId}/list-api-key:
    $ref: "admin-experimental.yaml#/paths/~1list-api-key"
  /v2/experimental/api-key/v1:
    $ref: "admin-experimental.yaml#/paths/~1update-api-key"
  /v2/experimental/api-key/v1/{apiKeyId}:
    $ref: "admin-experimental.yaml#/paths/~1read-api-key"
  /v2/experimental/app-user-extra/v1/{appUserId}:
    $ref: "admin-experimental.yaml#/paths/~1read-app-user-extra"
  /v2/experimental/generate-api-token/v1:
    $ref: "admin-experimental.yaml#/paths/~1generate-api-token"

  # endregion


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        An "api-token" for integration is generated manually via the app-client 
        (on the "API key" page, from the /generate-api-token endpoint). See 
        https://github.com/au-research/raido/blob/main/doc/security/readme.md
        The app-client UI uses an ephemeral api-token returned from the 
        `/idpresponse` URL as part of the OIDC sign-in process.