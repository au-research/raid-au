openapi: 3.0.3
info:
  title: stable-api-endpoints
  version: 1.0.0
  description: >
    The first metadata schema supported by Raido.
    The stuff in this "raido-metadata" file is "Raido" specific, as compared to
    the more standard "Raid" stuff defined in the "raid-metadata" file.
    This is what all raids imported from the legacy application were imported
    as.
paths:
  /raid:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - raido-stable-v1
      operationId: create-raid-v1
      summary: mint a raid
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RaidCreateRequest'
      responses:
        201:
          description: The Raid was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
        400:
          description: There was a problem with the message sent to the server.
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ValidationFailureResponse'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - raido-stable-v1
      operationId: list-raids-v1
      summary: list raids
      parameters:
        - name: servicePointId
          in: query
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaidDto'
  /raid/{prefix}/{suffix}:
    parameters:
      - name: prefix
        in: path
        required: true
        description: Prefix of the raid handle
        schema:
          type: string
      - name: suffix
        in: path
        required: true
        description: Suffix of the raid handle
        schema:
          type: string
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - raido-stable-v1
      operationId: read-raid-v1
      summary: read a raid, caller must be authorized
      responses:
        200:
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
        403:
          description: Closed or Embargoed raids return a 403 response with an access statement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClosedRaid'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - raido-stable-v1
      operationId: update-raid-v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RaidUpdateRequest'
      responses:
        200:
          description: The Raid was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
        400:
          description: Bad request. There was a problem with the message sent to the server.
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ValidationFailureResponse'
components:
  schemas:
    RaidCreateRequest:
      type: object
      required:
        - metadataSchema
        - titles
        - dates
        - contributors
        - access
      properties:
        identifier:
          $ref: '#/components/schemas/Id'
        title:
          type: array
          items: { $ref: '#/components/schemas/Title' }
        date: { $ref: '#/components/schemas/Date' }
        description:
          type: array
          items: { $ref: '#/components/schemas/Description' }
        access: { $ref: '#/components/schemas/Access' }
        alternateUrl:
          type: array
          items: { $ref: '#/components/schemas/AlternateUrl' }
        contributor:
          type: array
          items: { $ref: '#/components/schemas/Contributor' }
        organisation:
          type: array
          items: { $ref: '#/components/schemas/Organisation' }
        subject:
          type: array
          items: { $ref: '#/components/schemas/Subject' }
        relatedRaid:
          type: array
          items: { $ref: '#/components/schemas/RelatedRaid' }
        relatedObject:
          type: array
          items: { $ref: '#/components/schemas/RelatedObject' }
        alternateIdentifier:
          type: array
          items: { $ref: '#/components/schemas/AlternateIdentifier' }
        spatialCoverage:
          type: array
          items: { $ref: '#/components/schemas/SpatialCoverage' }
        traditionalKnowledgeLabel:
          type: array
          items: { $ref: '#/components/schemas/TraditionalKnowledgeLabel' }
    RaidUpdateRequest:
      type: object
      required:
        - identifier
        - metadataSchema
        - titles
        - dates
        - contributors
        - access
      properties:
        identifier: { $ref: '#/components/schemas/Id' }
        title:
          type: array
          items: { $ref: '#/components/schemas/Title' }
        date: { $ref: '#/components/schemas/Date' }
        description:
          type: array
          items: { $ref: '#/components/schemas/Description' }
        access: { $ref: '#/components/schemas/Access' }
        alternateUrl:
          type: array
          items: { $ref: '#/components/schemas/AlternateUrl' }
        contributor:
          type: array
          items: { $ref: '#/components/schemas/Contributor' }
        organisation:
          type: array
          items: { $ref: '#/components/schemas/Organisation' }
        subject:
          type: array
          items: { $ref: '#/components/schemas/Subject' }
        relatedRaid:
          type: array
          items: { $ref: '#/components/schemas/RelatedRaid' }
        relatedObject:
          type: array
          items: { $ref: '#/components/schemas/RelatedObject' }
        alternateIdentifier:
          type: array
          items: { $ref: '#/components/schemas/AlternateIdentifier' }
        spatialCoverage:
          type: array
          items: { $ref: '#/components/schemas/SpatialCoverage' }
        traditionalKnowledgeLabel:
          type: array
          items: { $ref: '#/components/schemas/TraditionalKnowledgeLabel' }
    RaidDto:
      allOf:
        - $ref: '#/components/schemas/RaidUpdateRequest'
    Id:
      type: object
      required: [ id, schemaUri, registrationAgency, owner, servicePoint, license, version ]
      properties:
        id:
          type: string
          description: The identifier of the raid, e.g. https://raid.org.au/102.100.100/zzz
          example: https://raid.org/xxx.yyy/zzz
        schemaUri:
          type: string
          description: >
            The URI of the Identifier scheme. For example, https://raid.org
          example: https://raid.org
        registrationAgency:
          $ref: '#/components/schemas/RegistrationAgency'
        owner:
          $ref: '#/components/schemas/Owner'
        globalUrl:
          type: string
          description: >
            The URL for the raid via the CNRI handle system, e.g 
            https://hdl.handle.net/xxx.yyy/zzz
          example: https://hdl.handle.net/xxx.yyy/zzz
        raidAgencyUrl:
          type: string
          description: >
            The URL for the raid via the minting raid agency system, e.g 
            https://raid.org.au/10378.1/1695863
          example: https://demo.raido-infra.com/handle/10378.1/1695863
        license:
          type: string
          description: The license under which the RAiD Metadata Record associated with this Identifier has been issued.
          example: Creative Commons CC-0
        version:
          type: integer
          description: The version of the resource. Read-only. Increments automatically on update.
    RegistrationAgency:
      type: object
      description: >
        ROR that identifies the organisation that operates the raid registration agency software that minted this raid.
      required: [id, schemaUri]
      properties:
        id: {
          type: string,
          example: https://ror.org/02stey378
        }
        schemaUri: {
          type: string,
          example: https://ror.org
        }
    Owner:
      type: object
      description: >
        The legal entity responsible for the RAiD; the ‘Owner’ of a RAiD. Analogous to a DataCite ‘Member’, has a 
        legal agreement with the Registration Agency.
      required: [id, schemaUri]
      properties:
        id: {
          type: string,
          example: https://ror.org/02stey378
        }
        schemaUri: {
          type: string,
          example: https://ror.org
        }
        servicePoint:
          type: integer
          format: int64
          description: >
            The Service Point (SP) that requested the RAiD. Analogous to a DataCite ‘Repository’. SPs belong to an owner, RAiD owners can have multiple SPs, and SPs do not need to be legal entities.
          example: 20000003
    Date:
      type: object
      description: Metadata schema block containing the start and end date of the RAiD.
      required: [ "startDate" ]
      properties:
        startDate: {
          type: string,
          example: 2023-08-28; 2023-08; 2023
        }
        endDate: {
          type: string,
          example: 2023-08-28; 2023-08; 2023
        }
    Title:
      type: object
      required: [text, type, startDate]
      properties:
        text: {type: string}
        type:
          $ref: '#/components/schemas/TitleTypeWithSchemaUri'
        startDate: {
          type: string,
          example: 2023-08-28; 2023-08; 2023
        }
        endDate: {
          type: string,
          example: 2023-08-28; 2023-08; 2023
        }
        language:
          $ref: '#/components/schemas/Language'
    TitleTypeWithSchemaUri:
      type: object
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/title/type/v1/primary.json
        }
        schemaUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/title/type/v1
        }
    Description:
      type: object
      required: ["text", "type"]
      properties:
        text: {type: string}
        type:
          $ref: '#/components/schemas/DescriptionTypeWithSchemaUri'
        language:
          $ref: '#/components/schemas/Language'
    DescriptionTypeWithSchemaUri:
      type: object
      required: [id, schemaUri]
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/description/type/v1/primary.json
        }
        schemaUri: {
           type: string,
           example: https://github.com/au-research/raid-metadata/tree/main/scheme/description/type/v1
        }
    Access:
      type: object
      required: ["type"]
      properties:
        type:
          $ref: '#/components/schemas/AccessTypeWithSchemaUri'
        statement:
          $ref: '#/components/schemas/AccessStatement'
        embargoExpiry: {
          type: string,
          format: date,
          description: Date the embargo on access to the RAiD ends. Year, month, and day required; may not be more than 18 months from the date the RAiD was registered.
        }
    AccessStatement:
      type: object
      required: [statement]
      properties:
        text: { type: string }
        language:
          $ref: '#/components/schemas/Language'
    AccessTypeWithSchemaUri:
      type: object
      required: [ id, schemaUri ]
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/access/type/v1/open.json
        }
        schemaUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/access/type/v1
        }
    Contributor:
      type: object
      required: [id, schemaUri, position, role]
      properties:
        id:
          type: string
        schemaUri: {
          type: string,
          example: https://orcid.org/
        }
        position:
          type: array
          items:
            $ref: '#/components/schemas/ContributorPositionWithSchemaUri'
        role:
          type: array
          items:
            $ref: '#/components/schemas/ContributorRoleWithSchemaUri'
        leader:
          type: boolean
        contact:
          type: boolean
    ContributorPositionWithSchemaUri:
      type: object
      required: [ schemaUri, id, startDate ]
      properties:
        schemaUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/contributor/position/v1
        }
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/contributor/position/v1/leader.json
        }
        startDate: {
          type: string,
          example: 2025-08-28; 2025-08; 2025
        }
        endDate: {
          type: string,
          example: 2025-08-28; 2025-08; 2025
        }
    ContributorRoleWithSchemaUri:
      type: object
      required: [ id, schemaUri ]
      properties:
        schemaUri: {
          type: string,
          example: https://credit.niso.org/
        }
        id: {
          type: string,
          example: https://credit.niso.org/contributor-roles/writing-review-editing/
        }
    Organisation:
      type: object
      required: [id, schemaUri, role]
      properties:
        id: { type: string }
        schemaUri: {
          type: string,
          example: https://ror.org/
        }
        role:
          type: array
          items:
            $ref: '#/components/schemas/OrganisationRoleWithSchemaUri'
    OrganisationRoleWithSchemaUri:
      type: object
      required: [id, schemaUri, startDate]
      properties:
        schemaUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/organisation/role/v1
        }
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/organisation/role/v1/lead-research-organisation.json
        }
        startDate: {
          type: string,
          example: 2025-08-28; 2025-08; 2025
        }
        endDate: {
          type: string,
          example: 2025-08-28; 2025-08; 2025
        }
    AlternateUrl:
      type: object
      required: [url]
      properties:
        url: { type: string }
    Subject:
      type: object
      required: [ id, schemaUri ]
      properties:
        id: { type: string }
        schemaUri: { type: string }
        keyword:
          type: array
          items:
            $ref: '#/components/schemas/SubjectKeyword'
    SubjectKeyword:
      type: object
      required: [ text ]
      properties:
        text: { type: string }
        language:
          $ref: '#/components/schemas/Language'
    RelatedRaid:
      type: object
      properties:
        id: { type: string }
        type:
          $ref: '#/components/schemas/RelatedRaidType'
    RelatedRaidType:
      type: object
      required: [ id, schemaUri ]
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/related-raid/type/v1/continues.json
        }
        schemaUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/related-raid/type/v1
        }
    RelatedObject:
      type: object
      properties:
        id: { type: string }
        schemaUri: { type: string }
        type:
          $ref: '#/components/schemas/RelatedObjectType'
        category:
          type: array
          items:
            $ref: '#/components/schemas/RelatedObjectCategory'
    RelatedObjectType:
      type: object
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/related-object/type/v1/book.json
        }
        schemaUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/related-object/type/v1
        }
    RelatedObjectCategory:
      type: object
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/related-object/category/v1/input.json
        }
        schemaUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/related-object/category/v1
        }
    AlternateIdentifier:
        type: object
        properties:
          id: { type: string }
          type: { type: string }
    SpatialCoverage:
      type: object
      properties:
        id: { type: string }
        schemaUri: { type: string }
        place:
          type: array
          items:
            $ref: '#/components/schemas/SpatialCoveragePlace'
    SpatialCoveragePlace:
      type: object
      properties:
        text: {
          type: string
        }
        language:
          $ref: '#/components/schemas/Language'
    TraditionalKnowledgeLabel:
      type: object
      properties:
        id: {
          type: string,
          example: https://localcontexts.org/label/tk-verified/
        }
        schemaUri: {
          type: string,
          example: https://localcontexts.org/labels/traditional-knowledge-labels/
        }
    Language:
      type: object
      required: [ code, schemaUri]
      properties:
        id: {
          type: string,
          example: eng
        }
        schemaUri: {
          type: string,
          example: https://iso639-3.sil.org/
        }
    ClosedRaid:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Id'
        access:
          $ref: '#/components/schemas/Access'
