openapi: 3.0.3
info:
  title: stable-api-endpoints
  version: 1.0.0
  description: >
    The first metadata schema supported by Raido.
    The stuff in this "raido-metadata" file is "Raido" specific, as compared to
    the more standard "Raid" stuff defined in the "raid-metadata" file.
    This is what all raids imported from the legacy application were imported
    as.
paths:
  /raid/v1:
    post:
      tags:
        - raido-stable-v1
      operationId: create-raid-v1
      summary: mint a raid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - { $ref: '#/components/schemas/RaidDto' }
              required: [ metadataSchema, titles, dates, contributors, access ]
      responses:
        200:
          description: The Raid was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
        400:
          description: There was a problem with the message sent to the server.
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ValidationFailureResponse'
    get:
      tags:
        - raido-stable-v1
      operationId: list-raids-v1
      summary: list raids
      parameters:
        - name: servicePointId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaidDto'
  /raid/v1/{prefix}/{suffix}:
    parameters:
      - name: prefix
        in: path
        required: true
        description: Prefix of the raid handle
        schema:
          type: string
      - name: suffix
        in: path
        required: true
        description: Suffix of the raid handle
        schema:
          type: string
    get:
      tags:
        - raido-stable-v1
      operationId: read-raid-v1
      summary: read a raid, caller must be authorized
      responses:
        200:
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
    put:
      tags:
        - raido-stable-v1
      operationId: update-raid-v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - { $ref: '#/components/schemas/RaidDto' }
              required: [ id, metadataSchema, titles, dates, contributors, access ]
      responses:
        200:
          description: The Raid was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
        400:
          description: Bad request. There was a problem with the message sent to the server.
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ValidationFailureResponse'
components:
  schemas:
    RaidDto:
      type: object
      properties:
        id: { $ref: 'metadata-block.yaml#/components/schemas/IdBlock' }
        metadataSchema: { $ref: 'shared.yaml#/components/schemas/RaidoMetaschema' }
        titles:
          type: array
          items: { $ref: '#/components/schemas/Title' }
        dates: { $ref: 'metadata-block.yaml#/components/schemas/DatesBlock' }
        descriptions:
          type: array
          items: { $ref: '#/components/schemas/Description' }
        access: { $ref: '#/components/schemas/Access' }
        alternateUrls:
          type: array
          items: { $ref: 'metadata-block.yaml#/components/schemas/AlternateUrlBlock' }
        contributors:
          type: array
          items: { $ref: '#/components/schemas/Contributor' }
        organisations:
          type: array
          items: { $ref: 'metadata-organisation-block.yaml#/components/schemas/OrganisationBlock' }
        subjects:
          type: array
          items: { $ref: 'metadata-block.yaml#/components/schemas/SubjectBlock' }
        relatedRaids:
          type: array
          items: { $ref: 'metadata-block.yaml#/components/schemas/RelatedRaidBlock' }
        relatedObjects:
          type: array
          items: { $ref: 'metadata-block.yaml#/components/schemas/RelatedObjectBlock' }
        alternateIdentifiers:
          type: array
          items: { $ref: 'metadata-block.yaml#/components/schemas/AlternateIdentifierBlock' }
        spatialCoverages:
          type: array
          items: { $ref: 'metadata-block.yaml#/components/schemas/SpatialCoverageBlock' }
        traditionalKnowledgeLabels:
          type: array
          items: { $ref: 'metadata-block.yaml#/components/schemas/TraditionalKnowledgeLabelBlock' }
    Title:
      type: object
      required: [title, type, startDate]
      properties:
        title: {type: string}
        type: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/blob/main/scheme/title/type/v1/primary.json'
        }
        schemeUri: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/tree/main/scheme/title/type/v1'
        }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
    Description:
      type: object
      required: ["description", "type"]
      properties:
        description: {type: string}
        type: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/blob/main/scheme/description/type/v1/primary.json'
        }
        schemeUri: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/tree/main/scheme/description/type/v1'
        }
    Access:
      type: object
      required: ["type", ]
      properties:
        type: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/blob/main/scheme/access/type/v1/open.json'
        }
        schemeUri: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/tree/main/scheme/access/type/v1'
        }
        accessStatement: { type: string }
    Contributor:
      type: object
      required: [id, schemeUri, positions, roles]
      properties:
        id: { type: string }
        schemeUri: {
          type: string,
          example: 'https://orcid.org/'
        }
        positions:
          type: array
          items:
            $ref: '#/components/schemas/ContribPosition'

        roles:
          type: array
          items:
            $ref: '#/components/schemas/ContribRole'
    ContribPosition:
      type: object
      required: [ schemeUri, position, startDate ]
      properties:
        schemeUri: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/tree/main/scheme/contributor/position/v1'
        }
        position: {
          type: string,
          example: 'https://github.com/au-research/raid-metadata/blob/main/scheme/contributor/position/v1/leader.json'
        }
        startDate: {
          type: string,
          format: date
        }
        endDate: {
          type: string,
          format: date
        }
    ContribRole:
      type: object
      required: [ role, schemeUri ]
      properties:
        schemeUri: {
          type: string,
          example: 'https://credit.niso.org/'
        }
        role: {
          type: string,
          example: 'https://credit.niso.org/contributor-roles/writing-review-editing/'
        }

