openapi: 3.0.3
info:
  title: stable-api-endpoints
  version: 1.0.0
  description: >
    The first metadata schema supported by Raido.
    The stuff in this "raido-metadata" file is "Raido" specific, as compared to
    the more standard "Raid" stuff defined in the "raid-metadata" file.
    This is what all raids imported from the legacy application were imported
    as.
paths:
  /raid:
    post:
      tags:
        - raido-stable-v1
      operationId: create-raid-v1
      summary: mint a raid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - { $ref: '#/components/schemas/RaidDto' }
              required: [ metadataSchema, titles, dates, contributors, access ]
      responses:
        200:
          description: The Raid was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
        400:
          description: There was a problem with the message sent to the server.
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ValidationFailureResponse'
    get:
      tags:
        - raido-stable-v1
      operationId: list-raids-v1
      summary: list raids
      parameters:
        - name: servicePointId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaidDto'
  /raid/{prefix}/{suffix}:
    parameters:
      - name: prefix
        in: path
        required: true
        description: Prefix of the raid handle
        schema:
          type: string
      - name: suffix
        in: path
        required: true
        description: Suffix of the raid handle
        schema:
          type: string
    get:
      tags:
        - raido-stable-v1
      operationId: read-raid-v1
      summary: read a raid, caller must be authorized
      responses:
        200:
          description: data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
    put:
      tags:
        - raido-stable-v1
      operationId: update-raid-v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - { $ref: '#/components/schemas/RaidDto' }
              required: [ id, metadataSchema, titles, dates, contributors, access ]
      responses:
        200:
          description: The Raid was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaidDto'
        400:
          description: Bad request. There was a problem with the message sent to the server.
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/components/schemas/ValidationFailureResponse'
components:
  schemas:
    RaidDto:
      type: object
      properties:
        id: { $ref: '#/components/schemas/Id' }
        titles:
          type: array
          items: { $ref: '#/components/schemas/Title' }
        dates: { $ref: 'metadata-block.yaml#/components/schemas/DatesBlock' }
        descriptions:
          type: array
          items: { $ref: '#/components/schemas/Description' }
        access: { $ref: '#/components/schemas/Access' }
        alternateUrls:
          type: array
          items: { $ref: '#/components/schemas/AlternateUrl' }
        contributors:
          type: array
          items: { $ref: '#/components/schemas/Contributor' }
        organisations:
          type: array
          items: { $ref: '#/components/schemas/Organisation' }
        subjects:
          type: array
          items: { $ref: '#/components/schemas/Subject' }
        relatedRaids:
          type: array
          items: { $ref: '#/components/schemas/RelatedRaid' }
        relatedObjects:
          type: array
          items: { $ref: '#/components/schemas/RelatedObject' }
        alternateIdentifiers:
          type: array
          items: { $ref: '#/components/schemas/AlternateIdentifier' }
        spatialCoverages:
          type: array
          items: { $ref: '#/components/schemas/SpatialCoverage' }
        traditionalKnowledgeLabels:
          type: array
          items: { $ref: '#/components/schemas/TraditionalKnowledgeLabel' }
    Id:
      type: object
      required: [ identifier, identifierSchemeUri,
                  identifierRegistrationAgency, identifierOwner, identifierServicePoint, version ]
      properties:
        identifier:
          type: string
          description: The identifier of the raid, e.g. https://raid.org.au/102.100.100/zzz
          example: https://raid.org/xxx.yyy/zzz
        identifierSchemeURI:
          type: string
          description: >
            The URI of the Identifier scheme. For example, https://raid.org
          example: https://raid.org
        identifierRegistrationAgency:
          type: string
          description: >
            ROR that identifies of the organisation that operates the 
            raid registration agency software that minted this raid.
          example: https://ror.org/038sjwq14
        identifierOwner:
          type: string
          description: >
            The legal entity responsible for the RAiD; the ‘Owner’ of a RAiD. Analogous to a DataCite ‘Member’, has a 
            legal agreement with the Registration Agency.
          example: https://ror.org/02stey378
        identifierServicePoint:
          type: integer
          format: int64
          description: >
            The Service Point that requested the RAiD. Analogous to a DataCite ‘Repository’. ‘Owners’ can have multiple
            Service Points, and SPs do not need to be legal entities.
          example: 20000003
        globalUrl:
          type: string
          description: >
            The URL for the raid via the CNRI handle system, e.g 
            https://hdl.handle.net/xxx.yyy/zzz
          example: https://hdl.handle.net/xxx.yyy/zzz
        raidAgencyUrl:
          type: string
          description: >
            The URL for the raid via the minting raid agency system, e.g 
            https://raid.org.au/10378.1/1695863
          example: https://demo.raido-infra.com/handle/10378.1/1695863
        version:
          type: integer
          description: The version of the resource. Read-only. Increments automatically on update.
    Title:
      type: object
      required: [title, type, startDate]
      properties:
        title: {type: string}
        type:
          $ref: '#/components/schemas/TitleTypeWithSchemeUri'
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
    TitleTypeWithSchemeUri:
      type: object
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/title/type/v1/primary.json
        }
        schemeUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/title/type/v1
        }
    Description:
      type: object
      required: ["description", "type"]
      properties:
        description: {type: string}
        type:
          $ref: '#/components/schemas/DescriptionTypeWithSchemeUri'
    DescriptionTypeWithSchemeUri:
      type: object
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/description/type/v1/primary.json
        }
        schemeUri: {
           type: string,
           example: https://github.com/au-research/raid-metadata/tree/main/scheme/description/type/v1
        }
    Access:
      type: object
      required: ["type"]
      properties:
        type:
          $ref: '#/components/schemas/AccessTypeWithSchemeUri'
        accessStatement: { type: string }
        embargoExpiry: {
          type: string,
          format: date
        }
    AccessTypeWithSchemeUri:
      type: object
      required: [ id, schemeUri ]
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/access/type/v1/open.json
        }
        schemeUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/access/type/v1
        }
    Contributor:
      type: object
      required: [id, schemeUri, positions, roles]
      properties:
        id:
          type: string
        identifierSchemeUri: {
          type: string,
          example: https://orcid.org/
        }
        positions:
          type: array
          items:
            $ref: '#/components/schemas/ContributorPositionWithSchemeUri'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/ContributorRoleWithSchemeUri'
    ContributorPositionWithSchemeUri:
      type: object
      required: [ schemeUri, id, startDate ]
      properties:
        schemeUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/contributor/position/v1
        }
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/contributor/position/v1/leader.json
        }
        startDate: {
          type: string,
          format: date
        }
        endDate: {
          type: string,
          format: date
        }
    ContributorRoleWithSchemeUri:
      type: object
      required: [ id, schemeUri ]
      properties:
        schemeUri: {
          type: string,
          example: https://credit.niso.org/
        }
        id: {
          type: string,
          example: https://credit.niso.org/contributor-roles/writing-review-editing/
        }
    Organisation:
      type: object
      required: [id, identifierSchemeUri, roles]
      properties:
        id: { type: string }
        identifierSchemeUri: {
          type: string,
          example: https://ror.org/
        }
        roles:
          type: array
          items:
            $ref: '#/components/schemas/OrganisationRoleWithSchemeUri'
    OrganisationRoleWithSchemeUri:
      type: object
      required: [id, schemeUri, startDate]
      properties:
        schemeUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/organisation/role/v1
        }
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/organisation/role/v1/lead-research-organisation.json
        }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
    AlternateUrl:
      type: object
      required: [ "url", ]
      properties:
        url: { type: string }
    Subject:
      type: object
      required: [ id, schemeUri ]
      properties:
        id: { type: string }
        schemeUri: { type: string }
        keyword: { type: string }
    RelatedRaid:
      type: object
      properties:
        id: { type: string }
        type:
          $ref: '#/components/schemas/RelatedRaidType'
    RelatedRaidType:
      type: object
      required: [ id, schemeUri ]
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/related-raid/type/v1/continues.json
        }
        schemeUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/related-raid/type/v1
        }
    RelatedObject:
      type: object
      properties:
        id: { type: string }
        identifierSchemeUri: { type: string }
        type:
          $ref: '#/components/schemas/RelatedObjectType'
        category:
          $ref: '#/components/schemas/RelatedObjectCategory'
    RelatedObjectType:
      type: object
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/related-object/type/v1/book.json
        }
        schemeUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/related-object/type/v1
        }
    RelatedObjectCategory:
      type: object
      properties:
        id: {
          type: string,
          example: https://github.com/au-research/raid-metadata/blob/main/scheme/related-object/category/v1/input.json
        }
        schemeUri: {
          type: string,
          example: https://github.com/au-research/raid-metadata/tree/main/scheme/related-object/category/v1
        }
    AlternateIdentifier:
        type: object
        properties:
          id: { type: string }
          type: { type: string }
    SpatialCoverage:
      type: object
      properties:
        id: { type: string }
        schemeUri: { type: string }
        place: { type: string }
    TraditionalKnowledgeLabel:
      type: object
      properties:
        schemeUri: { type: string }