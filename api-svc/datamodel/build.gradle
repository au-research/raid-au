plugins {
  id 'java'
}
import au.raid.org.api.*

tasks.register('pullLinkMLImage', Exec) {  
  commandLine '/usr/local/bin/docker', 'pull', 'linkml/linkml:1.9.2'
}

tasks.register('pullMKdocsImage', Exec) {
  commandLine '/usr/local/bin/docker', 'pull', 'squidfunk/mkdocs-material:9.6.14'
}

tasks.register('generateDatamodelDocsV2', Exec) {
  dependsOn "copyDocConfig"
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './:/base', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-doc', 'raid-core.yaml', '-d', '/generated/v2/documentation/docs/datamodel-docs',  '--subfolder-type-separation', '--hierarchical-class-view', '--template-directory', '/base/templates/datamodel-docs', '--example-directory', '/base/examples/'
}

tasks.register('generateSchemaDocsV2', Exec) {
  dependsOn "copyDocConfig"
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './:/base', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-doc', 'raid-core.yaml', '-d', '/generated/v2/documentation/docs/schema-docs',  '--subfolder-type-separation', '--hierarchical-class-view', '--template-directory', '/base/templates/schema-docs', '--example-directory', '/base/examples/'
}

tasks.register('generateSchemaOrgDocsV2', Exec) {
  dependsOn "copyDocConfig"
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './:/base', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-doc', 'researchproject.yaml', '-d', '/generated/v2/documentation/docs/schemaorg-docs',  '--subfolder-type-separation', '--hierarchical-class-view', '--template-directory', '/base/templates/schemaorg-docs', '--example-directory', '/base/examples/'
}

tasks.register('copyDocConfig', Exec) {
  commandLine 'cp', '-r', 'mkdocs-config/', 'generated'
}

tasks.register('buildDatamodelSite', Exec) {
  commandLine '/usr/local/bin/docker', 'run','-v', 'generated/v2/datamodel-docs:/docs', 'squidfunk/mkdocs-material', 'build'
}

tasks.register('generateJSONSchemaV2', Exec) {
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-json-schema', 'raid-core.yaml'
  doFirst {
    standardOutput new FileOutputStream("api-svc/datamodel/generated/v2/raid-jsonschema.json")
  }
}

tasks.register('generateJSONSchemaV2ResearchProject', Exec) {
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-json-schema', 'researchproject.yaml'
  doFirst {
    standardOutput new FileOutputStream("api-svc/datamodel/generated/v2/researchproject.json")
  }
}

tasks.register('generateSHACLV2', Exec) {
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-shacl', 'raid-core.yaml'
  doFirst {
    standardOutput new FileOutputStream("api-svc/datamodel/generated/v2/raid-shapes.ttl")
  }
}

tasks.register('generateJSONLDContextV2', Exec) {
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-jsonld-context', 'raid-core.yaml'
  doFirst {
    standardOutput new FileOutputStream("api-svc/datamodel/generated/v2/raid-context.jsonld")
  }
}


tasks.register('generateOWLContextV2', Exec) {
  dependsOn "pullLinkMLImage"
  commandLine '/usr/local/bin/docker', 'run', '-v', './src/v2:/work', '-v', './generated:/generated', '-w', '/work', 'linkml/linkml', 'gen-owl', '-f', 'ttl', 'raid-core.yaml'
  doFirst {
    standardOutput new FileOutputStream("api-svc/datamodel/generated/v2/raid-ontology.ttl")
  }
}


tasks.register('generateReferenceDataV2', GenerateReferenceDataTask) {
  dataModelPath = 'api-svc/datamodel/src/v2/core-enums.yaml'
  outputFile = "api-svc/datamodel/generated/v2/referencedata.sql"
  examplesDir = "api-svc/datamodel/examples/"
  mappingFile = "buildSrc/enum2table.yaml"
  schemaID = 3
}

tasks.register('generateExtendedReferenceDataV2', GenerateReferenceDataTask) {
  dataModelPath = 'api-svc/datamodel/src/v2/extended-enums.yaml'
  outputFile = "api-svc/datamodel/generated/v2/referencedata-extended.sql"
  examplesDir = "api-svc/datamodel/examples/"
  mappingFile = "buildSrc/extended-enum2table.yaml"
  schemaID = 3
}


tasks.register('generateStrictJsonSchemaV2', AddStaticEnums) {
  dependsOn "generateJSONSchemaV2"
  linkMLEnumsFiles = [file("src/v2/core-enums.yaml"), file("src/v2/extended-enums.yaml")]
  enumInfoFiles = [file("../../buildSrc/enum2table.yaml"), file("../../buildSrc/extended-enum2table.yaml")]
  generatedSchemaFile = file("generated/v2/raid-jsonschema.json")
  outputFile = file("generated/v2/raid-strict-jsonschema.json")
}

tasks.register('generateAllV2') {
  dependsOn "generateStrictJsonSchemaV2"
  dependsOn "generateJSONSchemaV2ResearchProject"
  dependsOn "generateExtendedReferenceDataV2"
  dependsOn "generateReferenceDataV2"
  dependsOn "generateSchemaDocsV2"
  dependsOn "generateDatamodelDocsV2"
  dependsOn "generateSchemaOrgDocsV2"


}
