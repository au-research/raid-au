# Enum: {{ gen.name(element) }} {% if element.deprecated %} <span style="color: red;"><strong> (DEPRECATED) </strong> {% endif %}

{% if element.description %}
{% set element_description_lines = element.description.split('\n') %}
{% for element_description_line in element_description_lines %}
_{{ element_description_line }}_
{% endfor %}
{% endif %}

URI: {{ gen.link(element) }}

{% if element.permissible_values -%}
## Permissible Values

| Value | Meaning | Description |
| --- | --- | --- |
{% for pv in element.permissible_values.values() -%}
| {{pv.text}} | {{pv.meaning}} | {{pv.description|enshorten}} |
{% endfor %}
{% else %}
This is a dynamic enumeration whose values are defined in externally managed vocabulary. 

Link to the vocabulary:
{% set source_nodes = element.reachable_from.source_nodes %}
{% if source_nodes is defined -%}
[{{source_nodes[0]}}]({{source_nodes[0]}})
{% endif %}

{% if gen.example_object_blobs(element.name) -%}
**Allowed values** (fetched at the time of the documentation generation):
{% set list1 = gen.example_object_blobs(element.name ~ '-allowed')[0][1].split('\n') %}
{% for value in list1 -%}
* {{value}}
{% endfor %}
{% endif %}

{% endif %}

{% set slots_for_enum = schemaview.get_slots_by_enum(element.name) %}
{% if slots_for_enum is defined and slots_for_enum|length > 0 -%}
## Slots

| Name | Description |
| ---  | --- |
{% for s in schemaview.get_slots_by_enum(element.name) -%}
| {{gen.link(s)}} | {{s.description|enshorten}} |
{% endfor %}
{% endif %}

{% include "common_metadata.md.jinja2" %}


## LinkML Source

<details>
```yaml
{{gen.yaml(element)}}
```
</details>