plugins {
  id 'java'
  id "org.openapi.generator" version "6.0.1"
}

ext {
  raidV1SpecFile = file("src/raid-v1-1-0.yaml")
  generateDirName = "src/main/generated"
}

repositories{
  mavenCentral()
  // needed for resolving spring-6 milestone builds
  maven { url "https://repo.spring.io/libs-milestone" }
}

dependencies{
  implementation libs.bundles.spring6

  // pkg: jakarta.servlet - used to be javax.servlet  
  compileOnly 'jakarta.platform:jakarta.jakartaee-web-api:9.1.0'

  implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'

}

compileJava {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

sourceSets{
  main.java{
    srcDirs += [generateDirName]
  }
}

task cleanGeneratedIdlRaidV1Src(type: Delete){
  group = "build"
  delete generateDirName
}

tasks.clean.dependsOn cleanGeneratedIdlRaidV1Src

openApiGenerate {
  generatorName = "spring"
  inputSpec = raidV1SpecFile.path
  outputDir = file(".").path
  
  validateSpec =  false
  generateApiDocumentation = false
  generateApiTests = false
  generateModelDocumentation = false
  generateModelTests = false
  
  modelPackage = "raido.idl.raidv1.model"
  apiPackage = "raido.idl.raidv1.api"

  
  // setting globals seems to mean it only generates what you specify
  globalProperties = [
    // setting this to blank seems to mean that it generates all models
    models: "",
    /* We're not using the API classes yet, because I haven't figured out how 
    to get openapi to generate a "principal" parameter. 
    That means we're duplicating the path and parameter specifications in 
    the api-svc Spring code and intTests.  I would prefer to use these, but it's
    really the model classes where most of the work is and we are using 
    those. */
    apis: "",
  ]

  configOptions = [
    sourceFolder: generateDirName,
    useOptional: "true",
    dateLibrary: "java8",
    documentationProvider: "none",
    disallowAdditionalPropertiesIfNotPresent: "false",
    openApiNullable: "false",

    /* not sure exactly, but it does cause not to genertae javax @Valid 
    annotations */
    useSpringBoot3: "true",

    /* Related to generating "apis". 
    Causes API classes to not generate default implementations of the endpoint
    methods. */
    skipDefaultInterface: "true",
    
  ]  
}

/* We don't need these classes and they cause compile failures. 
Can't figure out how to tell openapi to not generate them, so we cheat
and delete them directly instead.*/
task removeControllerClasses(type: Delete){
  group = "build"
  mustRunAfter "openApiGenerate"
  delete fileTree(generateDirName){
    include '**/*Controller.java'
  }
}

tasks.openApiGenerate {
  dependsOn cleanGeneratedIdlRaidV1Src
  finalizedBy removeControllerClasses
}

/* not sure why I have to add removeControllerClasses here, but if it's not
here, compileJava will fail trying to compile controllers   */
tasks.compileJava.dependsOn removeControllerClasses

/* CI build failed because even though spring depends on this project, this
propject didn't know it had to generate before compiling.
I think the correct approack to this is the openApiGenerate "apiFirst" config,
but it doesn't seem to actually do that.  
 */
tasks.compileJava.dependsOn tasks.openApiGenerate


openApiValidate {
  inputSpec = raidV1SpecFile.path
  recommend = true
}