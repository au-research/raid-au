import org.gradle.api.plugins.jvm.JvmTestSuite

plugins{
  id 'java'
  id 'org.springframework.boot' version '3.1.4'
  id 'io.spring.dependency-management' version '1.1.3'
}

ext{
  defaultSysProps = [
    /* prod machines will always be set to UTC, but developer machines are set 
    to whatever they want - so this forces it for gradle stuff. */
    'user.timezone': 'UTC',
    // platform specific, so force it
    'file.encoding': 'UTF-8',
    // for consistency, rather than any specific reason 
    "user.language":"", "user.country":"", "user.variant":"",
  ]
  
  // the config loading config :/
  homeDir = System.properties['user.home']
  configPath = System.getProperty("RAIDO_APISVC_CONFIG_PATH",
    "${homeDir}/.config/raido/api-svc.gradle")
}

/* after ext{} block so that stuff is the default, and so the config
   can refer to those default values */
if( file(configPath).exists() ){
  println "loading config from: ${configPath}"
  /* never done config this way before, not entirely sure it's a good idea,
  probably a Bad Plan to use a full turing-complete language for config */
  apply from: configPath
}

version = rootProject.version

/* don't use groovy for prod code: dynamic typing, slow startup and poor 
   historical upgrade compatibility */
dependencies{
  implementation project(':api-svc:db')
  implementation project(':api-svc:idl-raid-v1')
  implementation project(':api-svc:idl-raid-v2')
  implementation 'org.flywaydb:flyway-core:9.22.3'
  // look in settings.gradle for version catalog specs 
  implementation libs.bundles.springboot3
  implementation libs.springdoc.openapi

  /* for PostConstruct/PreDestroy - pkg: jakarta.annotation (used to be javax)
  https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api 
  */
  implementation 'jakarta.annotation:jakarta.annotation-api'

  /* logging DB statements 
  https://github.com/p6spy/p6spy/releases
  Another quiet project, consider an alternative. */
  implementation 'org.geonames:geonames-ws-client:1.1.17'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'
    // postgres DB driver
  runtimeOnly libs.pgjdbc

  /* support for JSON serialization for Spring endpoints
  According to https://github.com/FasterXML/jackson#actively-developed-versions
  the 2.13.x series is the latest stable. 
  There are 2.14.x series releases in maven, and about as many projects are 
  using 2.14.x and 2.13.x.
  https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
  Using 2.14.x might be a mistake, but I already made it for the dataformat and
  datatype libraries, so might as well be consistently wrong ðŸ˜’ */
  runtimeOnly 'com.fasterxml.jackson.core:jackson-databind'
  // support for XML serialization for APIDS endpoints (probably others later)
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
  // so that MappingJackson2XmlHttpMessageConverter can parse to LocalDateTime 
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

  /* used for:
   - generating/verifying HS256 JWTs for RAID v1 tokens 
   - verifying OIDC (google, aaf) RS256 JWTs 
   - generating/verifying HS256 JWTs for raido authz token
   
   https://github.com/auth0/java-jwt/blob/master/CHANGELOG.md  
   */
  implementation 'com.auth0:java-jwt:4.3.0'
  // https://github.com/auth0/jwks-rsa-java/blob/master/CHANGELOG.md
  implementation 'com.auth0:jwks-rsa:0.22.0'

  /* so we can customise to disable followRedirects for tests
  https://square.github.io/okhttp/changelogs/changelog_4x/
  No change since June 2022, but lots of work on 5.x series, still marked alpha.  
  */
  implementation "com.squareup.okhttp3:okhttp:4.10.0"
  
  // use logback as the backing log implementation for slf4j
//  runtimeOnly libs.bundles.logback.runtime

  // observability metrics  
  implementation 'io.micrometer:micrometer-core:1.10.6'
  // for local dev viewing of metrics - no plan to use JMX in AWS
  implementation 'io.micrometer:micrometer-registry-jmx:1.10.6'

  // for pushing metrics to AWS cloudwatch
  implementation 'software.amazon.awssdk:cloudwatch:2.20.52'
  implementation 'io.micrometer:micrometer-registry-cloudwatch2:1.10.6'

  testImplementation libs.bundles.springboot3.test

  testImplementation 'org.mockito:mockito-inline:4.11.0'
  testImplementation 'org.mockito:mockito-junit-jupiter'
  // https://junit.org/junit5/docs/current/release-notes/index.html
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

  testImplementation libs.assertj

  // because MockRestServiceServer couldn't find class org.hamcrest.Matcher
  testImplementation 'org.hamcrest:hamcrest'

  // needed for jsonpath testing in Spring MVC tests
  testImplementation 'com.jayway.jsonpath:json-path'

}

compileJava {
  options.compilerArgs <<
    // avoid warnings about spring classes using deprecated '-debug' 
    "-parameters" <<
    // annoy people into not doing unchecked shenanigans ðŸ˜’
    "-Xlint:unchecked" <<
    // annoy people into fixing their deprecation warnings 
    "-Xlint:deprecation"
}

testing{
  //noinspection GroovyAssignabilityCheck
  suites{
    //noinspection GroovyAssignabilityCheck
    intTest(JvmTestSuite){
      testType = TestSuiteType.INTEGRATION_TEST
      dependencies{
        // this brings the actual prod code
        implementation project()
        
        implementation project(':api-svc:db')
        implementation project(':api-svc:idl-raid-v1')
        implementation project(':api-svc:idl-raid-v2')

        implementation.bundle libs.bundles.springboot3
        implementation.bundle libs.bundles.springboot3.test

        implementation.bundle libs.bundles.feign

        implementation libs.assertj

        // for PostConstruct/PreDestroy - pkg: jakarta.annotation (used to be javax)
        implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
        
        implementation( 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.4'){
          /* Not a huge deal to pull in spring-boot, since it's only the
          integration tests - but still I don't want to deal with it.
          - avoids having to ignore all the confusing and unused
          implementations of Spring interfaces that it includes.
          - avoids any "it was already included" arguments. */
          exclude group: 'org.springframework.boot'
        }
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3"

        implementation 'com.auth0:java-jwt:4.0.0'

        implementation 'io.micrometer:micrometer-core:1.10.6'
        implementation 'io.micrometer:micrometer-registry-jmx:1.10.6'
        implementation "com.zaxxer:HikariCP:5.0.0"

        compileOnly 'org.projectlombok:lombok:1.18.28'
        annotationProcessor 'org.projectlombok:lombok:1.18.28'

      }
    }
  }
}
tasks.intTest.description = "don't run this, it's just a Gradle default"

// compile intTest classes - but don't run by default (needs DDB migration)
tasks.build.dependsOn intTestClasses

test{
  useJUnitPlatform()
  systemProperties defaultSysProps
  testLogging.showStandardStreams =
    System.getenv("RAIDO_UNIT_TEST_OUTPUT")?.toBoolean()
}

intTest{
  useJUnitPlatform()
  systemProperties defaultSysProps
  testLogging.showStandardStreams = true
}

task buildInfo(type: WriteProperties){
  description = "Write build-info.properties file"
  outputFile = file("${sourceSets.main.output.resourcesDir}/META-INF/build-info.properties")
  encoding = "UTF-8"
  comment = "This file built by Gradle task buildInfo"

  property("build.version", project.version)
//  property("build.commitId", rootProject.gitCommitHash)
  // we don't use it for stuff, it's for people, so format it nice
  property("build.buildDate", new Date().toString())
}
processResources.dependsOn buildInfo

bootJar {
  archiveFileName = "raido-api-svc.jar"
}

bootBuildImage {
  imageName = 'raid-api-base:latest'
}

tasks.register('buildDocker', Exec) {
  dependsOn bootBuildImage
  def imageName = project.hasProperty('imageName') ? project.imageName : 'raid-api:' + new Date().getTime()
  commandLine 'docker', 'build', '-t', imageName, '.'
}