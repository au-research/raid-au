import org.gradle.api.plugins.jvm.JvmTestSuite
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
//    classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.17.7'
  }
}

plugins {
  id 'java'
  id 'org.springframework.boot' version '3.2.6'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.jsonschema2pojo' version '1.2.1'
  id 'com.github.bjornvester.xjc' version '1.8.2'
}

//apply plugin: 'docker-compose'

ext {
  defaultSysProps = [
    /* prod machines will always be set to UTC, but developer machines are set
    to whatever they want - so this forces it for gradle stuff. */
    'user.timezone': 'UTC',
    // platform specific, so force it
    'file.encoding': 'UTF-8',
    // for consistency, rather than any specific reason
    "user.language":"", "user.country":"", "user.variant":"",
  ]

  // the config loading config :/
  homeDir = System.properties['user.home']
  configPath = System.getProperty("RAIDO_APISVC_CONFIG_PATH",
    "${homeDir}/.config/raido/api-svc.gradle")
}

/* after ext{} block so that stuff is the default, and so the config
   can refer to those default values */
if( file(configPath).exists() ){
  println "loading config from: ${configPath}"
  /* never done config this way before, not entirely sure it's a good idea,
  probably a Bad Plan to use a full turing-complete language for config */
  apply from: configPath
}

version = rootProject.version

/* don't use groovy for prod code: dynamic typing, slow startup and poor
   historical upgrade compatibility */
dependencies{
  compileOnly 'org.jetbrains:annotations:13.0'
  implementation project(':api-svc:db')
  implementation project(':api-svc:idl-raid-v2')
  implementation 'org.flywaydb:flyway-core:9.22.3'
  // look in settings.gradle for version catalog specs
  implementation libs.bundles.springboot
  implementation libs.springdoc.openapi

  implementation 'jakarta.annotation:jakarta.annotation-api'

  implementation 'org.geonames:geonames-ws-client:1.1.17'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'
    // postgres DB driver
  runtimeOnly libs.pgjdbc

  runtimeOnly 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.20.0'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'

  implementation 'jakarta.json:jakarta.json-api:2.1.3'
  implementation 'org.eclipse.parsson:jakarta.json:1.1.5'

  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.4'
  implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.6'

  testImplementation libs.bundles.springboot.test

  testImplementation 'org.mockito:mockito-inline:4.11.0'
  testImplementation 'org.mockito:mockito-junit-jupiter'
  // https://junit.org/junit5/docs/current/release-notes/index.html
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

  testImplementation libs.assertj

  // because MockRestServiceServer couldn't find class org.hamcrest.Matcher
  testImplementation 'org.hamcrest:hamcrest'

  // needed for jsonpath testing in Spring MVC tests
  testImplementation 'com.jayway.jsonpath:json-path'
  testImplementation 'org.springframework.security:spring-security-test:6.2.2'

  // XJC dependencies - need the actual compiler tools
  xjc 'org.glassfish.jaxb:jaxb-xjc:3.0.2'
  xjc 'org.glassfish.jaxb:jaxb-runtime:3.0.2'
  xjc 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
}

compileJava {
  options.compilerArgs <<
    // avoid warnings about spring classes using deprecated '-debug'
    "-parameters" <<
    // annoy people into not doing unchecked shenanigans ðŸ˜’
    "-Xlint:unchecked" <<
    // annoy people into fixing their deprecation warnings
    "-Xlint:deprecation"
}

testing{
  //noinspection GroovyAssignabilityCheck
  suites{
    //noinspection GroovyAssignabilityCheck
    intTest(JvmTestSuite){
      testType = TestSuiteType.INTEGRATION_TEST
      dependencies{
        implementation project(':api-svc:idl-raid-v2')

        implementation.bundle libs.bundles.springboot
        implementation.bundle libs.bundles.springboot.test

        implementation.bundle libs.bundles.feign

        implementation libs.assertj

        // for PostConstruct/PreDestroy - pkg: jakarta.annotation (used to be javax)
        implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'

        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3"

        compileOnly 'org.projectlombok:lombok:1.18.28'
        annotationProcessor 'org.projectlombok:lombok:1.18.28'

      }
    }
  }
}
tasks.intTest.description = "don't run this, it's just a Gradle default"

// compile intTest classes - but don't run by default (needs DDB migration)
tasks.build.dependsOn intTestClasses

test {
  useJUnitPlatform()
  systemProperties defaultSysProps
  testLogging.showStandardStreams =
    System.getenv("RAIDO_UNIT_TEST_OUTPUT")?.toBoolean()
}

intTest {
  useJUnitPlatform()
  systemProperties defaultSysProps
  testLogging.showStandardStreams = true
}

task buildInfo(type: WriteProperties) {
  description = "Write build-info.properties file"
  outputFile = file("${sourceSets.main.output.resourcesDir}/META-INF/build-info.properties")
  encoding = "UTF-8"
  comment = "This file built by Gradle task buildInfo"

  property("build.version", project.version)
//  property("build.commitId", rootProject.gitCommitHash)
  // we don't use it for stuff, it's for people, so format it nice
  property("build.buildDate", new Date().toString())
}
processResources.dependsOn buildInfo

bootJar {
  archiveFileName = "raido-api-svc.jar"
}

bootBuildImage {
  imageName = 'raid-api-base:latest'
}

tasks.register('buildDocker', Exec) {
  dependsOn bootBuildImage
  def imageName = project.hasProperty('imageName') ? project.imageName : 'raid-api:latest'
  commandLine 'docker', 'build', '-t', imageName, '.'
}

tasks.register('dockerComposeUp', Exec) {
  dependsOn ':iam:build'
  commandLine 'docker', 'compose', 'up', '--wait', '--detach'
}

tasks.register('dockerComposeDown', Exec) {
  commandLine 'docker', 'compose', 'down', '-v'
}

tasks.withType(Test) {
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    showExceptions = true
    exceptionFormat = TestExceptionFormat.FULL
    showCauses = true
    showStackTraces = true
  }
}

jsonSchema2Pojo {
  // Source directory containing your JSON schema files
  source = files("${projectDir}/src/main/resources/ror_schema_v2_1.json")

  // Target directory for generated Java classes
  targetDirectory = file("${projectDir}/src/main/generated")

  // Target package for generated classes
  targetPackage = 'au.org.raid.api.client.ror.dto'

  // Include generated sources in compilation
  sourceType = 'jsonschema'

  // Generate builder methods
  generateBuilders = true

  // Include JSR-303 annotations (@Valid, @NotNull, etc.)
  useJakartaValidation = true
  includeJsr303Annotations = true

  // Jackson annotations are already included by default (annotationStyle = 'jackson')

  // Date/time type configuration
  dateTimeType = 'java.time.OffsetDateTime'

  // Additional options
  useLongIntegers = false
  useDoubleNumbers = true
  includeHashcodeAndEquals = true
  includeToString = true
  includeAllPropertiesConstructor = true
  constructorsRequiredPropertiesOnly = false
}

sourceSets {
  main {
    java {
      srcDir "${projectDir}/src/main/generated"
    }
  }
}

tasks.named('compileJava') {
  dependsOn tasks.named('generateJsonSchema2Pojo')
}

xjc {
  xsdDir.set(layout.projectDirectory.dir("src/main/resources/schema/xsd"))
  bindingFiles.from("src/main/resources/schema/xsd/bindings.xjb")
  outputJavaDir.set(layout.projectDirectory.dir("src/main/generated"))
  defaultPackage.set("au.org.raid.api.client.isni.dto")
}

tasks.named('compileJava') {
  dependsOn tasks.named('generateJsonSchema2Pojo')
  dependsOn tasks.named('xjc')
}

bootRun {
  systemProperties = System.properties
}
