import io.gatling.gradle.GatlingRunTask

plugins{
  id 'java'
  id 'io.gatling.gradle' version "3.9.3"
}
 
ext{
  defaultSysProps = [
    /* prod machines will always be set to UTC, but developer machines are set 
    to whatever they want - so this forces it for gradle stuff. */
    'user.timezone': 'UTC',
    // platform specific, so force it
    'file.encoding': 'UTF-8',
    // for consistency, rather than any specific reason 
    "user.language":"", "user.country":"", "user.variant":"",
  ]

  /* these are copied from doco, dunno if they're defaulted (or still relevant): 
  https://gatling.io/docs/gatling/reference/current/extensions/gradle_plugin/ */
  defaultJvmArgs = [
    '-server',
    '-Xmx1G',
    '-XX:+UseG1GC',
    '-XX:+ParallelRefProcEnabled',
    '-XX:MaxInlineLevel=20',
    '-XX:MaxTrivialSize=12',
  ]

  // the config loading config :/
  homeDir = System.properties['user.home']
}

repositories{
  mavenCentral()
}

version = rootProject.version

dependencies{
  // may be depended on from test projects (e.g. unit, int and load tests)
  gatling project(':api-svc:test-shared')

  /* we don't reach into the DB from load-tests, but some of the api-svc code
  uses the DB Enums like UserRole and IdProvider as string values.
  This is definitely a mistake, it's leaking internal service (literally DB 
  schema structure out across the API.  We ought to be returning string 
  constants/OpenAPI enum types at the API level, or at least defining these
  internal API classes, like AuthzUtil with string params instead of DB enum
  constants. */
  gatling project(':api-svc:db:raido')

  /* needed because the above mentioned enums inherit from jooq classes  */
  gatling libs.jooq

  /* included for the generated API data classes, to format our endpoint calls 
  without having to resort to string concatenation and so we get compile-time 
  errors if API changes are made the will break the load tests.
  We won't be using any OpenAPI client code (e.g. app-client) or feign client 
  code (e.g. intTests) - we have to use the actual Gatling API to declare what
  endpoints will be invoked with specific data (it's fundamental to how 
  Gatling works; specifically, the Akka/actor-model implementation). */
  gatling project(':api-svc:idl-raid-v2')

  /* Got a lot of compilation warnings about  
  warning: unknown enum constant ISO.DATE_TIME
    reason: class file for org.springframework.format.annotation.DateTimeFormat$ISO not found
  I'm guessing it's coz open-api is generating IDL with Spring annotations, 
  which makes sense since we're using the spring generator.
  Would prefer to have load-test work off of its own non-spring generation step,
  see comment on RaidoApi.Endpoint - then the load-test wouldn't need bring in
  all of spring for no real reason. */
  gatling libs.bundles.spring6


  /* for re-using code like AuthzUtil and AuthService classes 
  Ideally, would probably be better to have a "shared" Gradle sub-project that 
  both api-svc and this project (and others like it) can depend on. */
  gatling project(':api-svc:spring')

  gatling libs.bundles.slf4j

  gatlingRuntimeOnly 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
  gatling 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.2'
  gatling "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2"

  gatling 'com.auth0:java-jwt:4.3.0'

  /* for random raid titles and other data
  library is stale and has a lot of CVEs, but it's not prod code - it's ok */
  //noinspection VulnerableLibrariesLocal
  gatling 'com.github.javafaker:javafaker:1.0.2'

  // use logback as the backing log implementation for slf4j
  gatlingRuntimeOnly libs.bundles.logback.runtime
}

compileJava {
  options.compilerArgs <<
    // avoid warnings about spring classes using deprecated '-debug' 
    "-parameters" <<
    // annoy people into not doing unchecked shenanigans ðŸ˜’
    "-Xlint:unchecked" <<
    // annoy people into fixing their deprecation warnings 
    "-Xlint:deprecation"
}

// look for resources in the source tree, resources folder is pointless 
sourceSets.gatling.resources.srcDirs(sourceSets.gatling.java.srcDirs)

// logLevel doesn't work - see logback.xml
gatling {
  simulations = {
    include "todo"
  }
  
  jvmArgs = defaultJvmArgs
  systemProperties = defaultSysProps
}

task gatlingRunPrepareServicePoints(type: GatlingRunTask) {
  simulations = {
    include "raido/loadtest/simulation/PrepareServicePoints.java"
  }

  outputs.upToDateWhen { false }
  
  jvmArgs = defaultJvmArgs
  systemProperties = defaultSysProps
}

task gatlingRunCreateViewRaids(type: GatlingRunTask) {
  dependsOn gatlingRunPrepareServicePoints
  simulations = {
    include "raido/loadtest/simulation/SimpleCreateViewRaids.java"
  }

  outputs.upToDateWhen { false }
  
  jvmArgs = defaultJvmArgs
  systemProperties = defaultSysProps
}

