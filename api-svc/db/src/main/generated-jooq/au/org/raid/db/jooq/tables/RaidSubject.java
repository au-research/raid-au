/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.RaidSubjectRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaidSubject extends TableImpl<RaidSubjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.raid_subject</code>
     */
    public static final RaidSubject RAID_SUBJECT = new RaidSubject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidSubjectRecord> getRecordType() {
        return RaidSubjectRecord.class;
    }

    /**
     * The column <code>api_svc.raid_subject.id</code>.
     */
    public final TableField<RaidSubjectRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.raid_subject.raid_name</code>.
     */
    public final TableField<RaidSubjectRecord, String> RAID_NAME = createField(DSL.name("raid_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_subject.subject_type_id</code>.
     */
    public final TableField<RaidSubjectRecord, String> SUBJECT_TYPE_ID = createField(DSL.name("subject_type_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    private RaidSubject(Name alias, Table<RaidSubjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaidSubject(Name alias, Table<RaidSubjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.raid_subject</code> table reference
     */
    public RaidSubject(String alias) {
        this(DSL.name(alias), RAID_SUBJECT);
    }

    /**
     * Create an aliased <code>api_svc.raid_subject</code> table reference
     */
    public RaidSubject(Name alias) {
        this(alias, RAID_SUBJECT);
    }

    /**
     * Create a <code>api_svc.raid_subject</code> table reference
     */
    public RaidSubject() {
        this(DSL.name("raid_subject"), null);
    }

    public <O extends Record> RaidSubject(Table<O> child, ForeignKey<O, RaidSubjectRecord> key) {
        super(child, key, RAID_SUBJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<RaidSubjectRecord, Integer> getIdentity() {
        return (Identity<RaidSubjectRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RaidSubjectRecord> getPrimaryKey() {
        return Keys.RAID_SUBJECT_PKEY;
    }

    @Override
    public List<UniqueKey<RaidSubjectRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.RAID_SUBJECT_RAID_NAME_SUBJECT_TYPE_ID_KEY);
    }

    @Override
    public List<ForeignKey<RaidSubjectRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RAID_SUBJECT__FK_RAID_SUBJECT_RAID_NAME, Keys.RAID_SUBJECT__FK_RAID_SUBJECT_SUBJECT_ID);
    }

    private transient Raid _raid;
    private transient SubjectType _subjectType;

    /**
     * Get the implicit join path to the <code>api_svc.raid</code> table.
     */
    public Raid raid() {
        if (_raid == null)
            _raid = new Raid(this, Keys.RAID_SUBJECT__FK_RAID_SUBJECT_RAID_NAME);

        return _raid;
    }

    /**
     * Get the implicit join path to the <code>api_svc.subject_type</code>
     * table.
     */
    public SubjectType subjectType() {
        if (_subjectType == null)
            _subjectType = new SubjectType(this, Keys.RAID_SUBJECT__FK_RAID_SUBJECT_SUBJECT_ID);

        return _subjectType;
    }

    @Override
    public RaidSubject as(String alias) {
        return new RaidSubject(DSL.name(alias), this);
    }

    @Override
    public RaidSubject as(Name alias) {
        return new RaidSubject(alias, this);
    }

    @Override
    public RaidSubject as(Table<?> alias) {
        return new RaidSubject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidSubject rename(String name) {
        return new RaidSubject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidSubject rename(Name name) {
        return new RaidSubject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidSubject rename(Table<?> name) {
        return new RaidSubject(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
