/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.RaidContributorPositionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaidContributorPosition extends TableImpl<RaidContributorPositionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.raid_contributor_position</code>
     */
    public static final RaidContributorPosition RAID_CONTRIBUTOR_POSITION = new RaidContributorPosition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidContributorPositionRecord> getRecordType() {
        return RaidContributorPositionRecord.class;
    }

    /**
     * The column <code>api_svc.raid_contributor_position.raid_name</code>.
     */
    public final TableField<RaidContributorPositionRecord, String> RAID_NAME = createField(DSL.name("raid_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_contributor_position.contributor_id</code>.
     */
    public final TableField<RaidContributorPositionRecord, Integer> CONTRIBUTOR_ID = createField(DSL.name("contributor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>api_svc.raid_contributor_position.contributor_position_id</code>.
     */
    public final TableField<RaidContributorPositionRecord, Integer> CONTRIBUTOR_POSITION_ID = createField(DSL.name("contributor_position_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RaidContributorPosition(Name alias, Table<RaidContributorPositionRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaidContributorPosition(Name alias, Table<RaidContributorPositionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.raid_contributor_position</code> table
     * reference
     */
    public RaidContributorPosition(String alias) {
        this(DSL.name(alias), RAID_CONTRIBUTOR_POSITION);
    }

    /**
     * Create an aliased <code>api_svc.raid_contributor_position</code> table
     * reference
     */
    public RaidContributorPosition(Name alias) {
        this(alias, RAID_CONTRIBUTOR_POSITION);
    }

    /**
     * Create a <code>api_svc.raid_contributor_position</code> table reference
     */
    public RaidContributorPosition() {
        this(DSL.name("raid_contributor_position"), null);
    }

    public <O extends Record> RaidContributorPosition(Table<O> child, ForeignKey<O, RaidContributorPositionRecord> key) {
        super(child, key, RAID_CONTRIBUTOR_POSITION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public UniqueKey<RaidContributorPositionRecord> getPrimaryKey() {
        return Keys.RAID_CONTRIBUTOR_POSITION_PKEY;
    }

    @Override
    public List<ForeignKey<RaidContributorPositionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RAID_CONTRIBUTOR_POSITION__FK_RAID_CONTRIBUTOR_POSITION_RAID_NAME, Keys.RAID_CONTRIBUTOR_POSITION__FK_RAID_CONTRIBUTOR_CONTRIBUTOR_ID, Keys.RAID_CONTRIBUTOR_POSITION__FK_RAID_CONTRIBUTOR_POSITION_CONTRIBUTOR_POSITION_ID);
    }

    private transient Raid _raid;
    private transient Contributor _contributor;
    private transient ContributorPosition _contributorPosition;

    /**
     * Get the implicit join path to the <code>api_svc.raid</code> table.
     */
    public Raid raid() {
        if (_raid == null)
            _raid = new Raid(this, Keys.RAID_CONTRIBUTOR_POSITION__FK_RAID_CONTRIBUTOR_POSITION_RAID_NAME);

        return _raid;
    }

    /**
     * Get the implicit join path to the <code>api_svc.contributor</code> table.
     */
    public Contributor contributor() {
        if (_contributor == null)
            _contributor = new Contributor(this, Keys.RAID_CONTRIBUTOR_POSITION__FK_RAID_CONTRIBUTOR_CONTRIBUTOR_ID);

        return _contributor;
    }

    /**
     * Get the implicit join path to the
     * <code>api_svc.contributor_position</code> table.
     */
    public ContributorPosition contributorPosition() {
        if (_contributorPosition == null)
            _contributorPosition = new ContributorPosition(this, Keys.RAID_CONTRIBUTOR_POSITION__FK_RAID_CONTRIBUTOR_POSITION_CONTRIBUTOR_POSITION_ID);

        return _contributorPosition;
    }

    @Override
    public RaidContributorPosition as(String alias) {
        return new RaidContributorPosition(DSL.name(alias), this);
    }

    @Override
    public RaidContributorPosition as(Name alias) {
        return new RaidContributorPosition(alias, this);
    }

    @Override
    public RaidContributorPosition as(Table<?> alias) {
        return new RaidContributorPosition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidContributorPosition rename(String name) {
        return new RaidContributorPosition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidContributorPosition rename(Name name) {
        return new RaidContributorPosition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidContributorPosition rename(Table<?> name) {
        return new RaidContributorPosition(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
