/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.RaidOrganisationRoleRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaidOrganisationRole extends TableImpl<RaidOrganisationRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.raid_organisation_role</code>
     */
    public static final RaidOrganisationRole RAID_ORGANISATION_ROLE = new RaidOrganisationRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidOrganisationRoleRecord> getRecordType() {
        return RaidOrganisationRoleRecord.class;
    }

    /**
     * The column <code>api_svc.raid_organisation_role.id</code>.
     */
    public final TableField<RaidOrganisationRoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>api_svc.raid_organisation_role.raid_organisation_id</code>.
     */
    public final TableField<RaidOrganisationRoleRecord, Integer> RAID_ORGANISATION_ID = createField(DSL.name("raid_organisation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>api_svc.raid_organisation_role.organisation_role_id</code>.
     */
    public final TableField<RaidOrganisationRoleRecord, Integer> ORGANISATION_ROLE_ID = createField(DSL.name("organisation_role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_organisation_role.start_date</code>.
     */
    public final TableField<RaidOrganisationRoleRecord, String> START_DATE = createField(DSL.name("start_date"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>api_svc.raid_organisation_role.end_date</code>.
     */
    public final TableField<RaidOrganisationRoleRecord, String> END_DATE = createField(DSL.name("end_date"), SQLDataType.VARCHAR, this, "");

    private RaidOrganisationRole(Name alias, Table<RaidOrganisationRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaidOrganisationRole(Name alias, Table<RaidOrganisationRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.raid_organisation_role</code> table
     * reference
     */
    public RaidOrganisationRole(String alias) {
        this(DSL.name(alias), RAID_ORGANISATION_ROLE);
    }

    /**
     * Create an aliased <code>api_svc.raid_organisation_role</code> table
     * reference
     */
    public RaidOrganisationRole(Name alias) {
        this(alias, RAID_ORGANISATION_ROLE);
    }

    /**
     * Create a <code>api_svc.raid_organisation_role</code> table reference
     */
    public RaidOrganisationRole() {
        this(DSL.name("raid_organisation_role"), null);
    }

    public <O extends Record> RaidOrganisationRole(Table<O> child, ForeignKey<O, RaidOrganisationRoleRecord> key) {
        super(child, key, RAID_ORGANISATION_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<RaidOrganisationRoleRecord, Integer> getIdentity() {
        return (Identity<RaidOrganisationRoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RaidOrganisationRoleRecord> getPrimaryKey() {
        return Keys.RAID_ORGANISATION_ROLE_PKEY;
    }

    @Override
    public List<ForeignKey<RaidOrganisationRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RAID_ORGANISATION_ROLE__RAID_ORGANISATION_ROLE_RAID_ORGANISATION_ID_FKEY, Keys.RAID_ORGANISATION_ROLE__RAID_ORGANISATION_ROLE_ORGANISATION_ROLE_ID_FKEY);
    }

    private transient RaidOrganisation _raidOrganisation;
    private transient OrganisationRole _organisationRole;

    /**
     * Get the implicit join path to the <code>api_svc.raid_organisation</code>
     * table.
     */
    public RaidOrganisation raidOrganisation() {
        if (_raidOrganisation == null)
            _raidOrganisation = new RaidOrganisation(this, Keys.RAID_ORGANISATION_ROLE__RAID_ORGANISATION_ROLE_RAID_ORGANISATION_ID_FKEY);

        return _raidOrganisation;
    }

    /**
     * Get the implicit join path to the <code>api_svc.organisation_role</code>
     * table.
     */
    public OrganisationRole organisationRole() {
        if (_organisationRole == null)
            _organisationRole = new OrganisationRole(this, Keys.RAID_ORGANISATION_ROLE__RAID_ORGANISATION_ROLE_ORGANISATION_ROLE_ID_FKEY);

        return _organisationRole;
    }

    @Override
    public RaidOrganisationRole as(String alias) {
        return new RaidOrganisationRole(DSL.name(alias), this);
    }

    @Override
    public RaidOrganisationRole as(Name alias) {
        return new RaidOrganisationRole(alias, this);
    }

    @Override
    public RaidOrganisationRole as(Table<?> alias) {
        return new RaidOrganisationRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidOrganisationRole rename(String name) {
        return new RaidOrganisationRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidOrganisationRole rename(Name name) {
        return new RaidOrganisationRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidOrganisationRole rename(Table<?> name) {
        return new RaidOrganisationRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
