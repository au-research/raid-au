/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.TeamUserRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamUser extends TableImpl<TeamUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.team_user</code>
     */
    public static final TeamUser TEAM_USER = new TeamUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamUserRecord> getRecordType() {
        return TeamUserRecord.class;
    }

    /**
     * The column <code>api_svc.team_user.app_user_id</code>.
     */
    public final TableField<TeamUserRecord, Long> APP_USER_ID = createField(DSL.name("app_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>api_svc.team_user.team_id</code>.
     */
    public final TableField<TeamUserRecord, String> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    private TeamUser(Name alias, Table<TeamUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamUser(Name alias, Table<TeamUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.team_user</code> table reference
     */
    public TeamUser(String alias) {
        this(DSL.name(alias), TEAM_USER);
    }

    /**
     * Create an aliased <code>api_svc.team_user</code> table reference
     */
    public TeamUser(Name alias) {
        this(alias, TEAM_USER);
    }

    /**
     * Create a <code>api_svc.team_user</code> table reference
     */
    public TeamUser() {
        this(DSL.name("team_user"), null);
    }

    public <O extends Record> TeamUser(Table<O> child, ForeignKey<O, TeamUserRecord> key) {
        super(child, key, TEAM_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public List<UniqueKey<TeamUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TEAM_USER_APP_USER_ID_TEAM_ID_KEY);
    }

    @Override
    public List<ForeignKey<TeamUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEAM_USER__TEAM_USER_APP_USER_ID_FKEY, Keys.TEAM_USER__TEAM_USER_TEAM_ID_FKEY);
    }

    private transient AppUser _appUser;
    private transient Team _team;

    /**
     * Get the implicit join path to the <code>api_svc.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.TEAM_USER__TEAM_USER_APP_USER_ID_FKEY);

        return _appUser;
    }

    /**
     * Get the implicit join path to the <code>api_svc.team</code> table.
     */
    public Team team() {
        if (_team == null)
            _team = new Team(this, Keys.TEAM_USER__TEAM_USER_TEAM_ID_FKEY);

        return _team;
    }

    @Override
    public TeamUser as(String alias) {
        return new TeamUser(DSL.name(alias), this);
    }

    @Override
    public TeamUser as(Name alias) {
        return new TeamUser(alias, this);
    }

    @Override
    public TeamUser as(Table<?> alias) {
        return new TeamUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamUser rename(String name) {
        return new TeamUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamUser rename(Name name) {
        return new TeamUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamUser rename(Table<?> name) {
        return new TeamUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
