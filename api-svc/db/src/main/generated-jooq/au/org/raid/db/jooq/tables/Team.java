/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.TeamRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Team extends TableImpl<TeamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.team</code>
     */
    public static final Team TEAM = new Team();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamRecord> getRecordType() {
        return TeamRecord.class;
    }

    /**
     * The column <code>api_svc.team.id</code>.
     */
    public final TableField<TeamRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.team.name</code>.
     */
    public final TableField<TeamRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.team.prefix</code>.
     */
    public final TableField<TeamRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.team.service_point_id</code>.
     */
    public final TableField<TeamRecord, Long> SERVICE_POINT_ID = createField(DSL.name("service_point_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Team(Name alias, Table<TeamRecord> aliased) {
        this(alias, aliased, null);
    }

    private Team(Name alias, Table<TeamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.team</code> table reference
     */
    public Team(String alias) {
        this(DSL.name(alias), TEAM);
    }

    /**
     * Create an aliased <code>api_svc.team</code> table reference
     */
    public Team(Name alias) {
        this(alias, TEAM);
    }

    /**
     * Create a <code>api_svc.team</code> table reference
     */
    public Team() {
        this(DSL.name("team"), null);
    }

    public <O extends Record> Team(Table<O> child, ForeignKey<O, TeamRecord> key) {
        super(child, key, TEAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public UniqueKey<TeamRecord> getPrimaryKey() {
        return Keys.TEAM_PKEY;
    }

    @Override
    public List<UniqueKey<TeamRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TEAM_PREFIX_KEY);
    }

    @Override
    public List<ForeignKey<TeamRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEAM__TEAM_SERVICE_POINT_ID_FKEY);
    }

    private transient ServicePoint _servicePoint;

    /**
     * Get the implicit join path to the <code>api_svc.service_point</code>
     * table.
     */
    public ServicePoint servicePoint() {
        if (_servicePoint == null)
            _servicePoint = new ServicePoint(this, Keys.TEAM__TEAM_SERVICE_POINT_ID_FKEY);

        return _servicePoint;
    }

    @Override
    public Team as(String alias) {
        return new Team(DSL.name(alias), this);
    }

    @Override
    public Team as(Name alias) {
        return new Team(alias, this);
    }

    @Override
    public Team as(Table<?> alias) {
        return new Team(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Team rename(String name) {
        return new Team(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Team rename(Name name) {
        return new Team(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Team rename(Table<?> name) {
        return new Team(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
