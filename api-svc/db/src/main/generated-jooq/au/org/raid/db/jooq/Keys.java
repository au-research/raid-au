/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq;


import au.org.raid.db.jooq.tables.AccessType;
import au.org.raid.db.jooq.tables.AccessTypeSchema;
import au.org.raid.db.jooq.tables.AppUser;
import au.org.raid.db.jooq.tables.ContributorPosition;
import au.org.raid.db.jooq.tables.ContributorPositionSchema;
import au.org.raid.db.jooq.tables.ContributorRole;
import au.org.raid.db.jooq.tables.ContributorRoleSchema;
import au.org.raid.db.jooq.tables.DescriptionType;
import au.org.raid.db.jooq.tables.DescriptionTypeSchema;
import au.org.raid.db.jooq.tables.FlywaySchemaHistory;
import au.org.raid.db.jooq.tables.Language;
import au.org.raid.db.jooq.tables.LanguageSchema;
import au.org.raid.db.jooq.tables.OrganisationRole;
import au.org.raid.db.jooq.tables.OrganisationRoleSchema;
import au.org.raid.db.jooq.tables.Raid;
import au.org.raid.db.jooq.tables.RaidHistory;
import au.org.raid.db.jooq.tables.RaidoOperator;
import au.org.raid.db.jooq.tables.RelatedObjectCategory;
import au.org.raid.db.jooq.tables.RelatedObjectCategorySchema;
import au.org.raid.db.jooq.tables.RelatedObjectType;
import au.org.raid.db.jooq.tables.RelatedObjectTypeSchema;
import au.org.raid.db.jooq.tables.RelatedRaidType;
import au.org.raid.db.jooq.tables.RelatedRaidTypeSchema;
import au.org.raid.db.jooq.tables.ServicePoint;
import au.org.raid.db.jooq.tables.SubjectType;
import au.org.raid.db.jooq.tables.SubjectTypeSchema;
import au.org.raid.db.jooq.tables.TitleType;
import au.org.raid.db.jooq.tables.TitleTypeSchema;
import au.org.raid.db.jooq.tables.Token;
import au.org.raid.db.jooq.tables.TraditionalKnowledgeLabel;
import au.org.raid.db.jooq.tables.TraditionalKnowledgeLabelSchema;
import au.org.raid.db.jooq.tables.UserAuthzRequest;
import au.org.raid.db.jooq.tables.records.AccessTypeRecord;
import au.org.raid.db.jooq.tables.records.AccessTypeSchemaRecord;
import au.org.raid.db.jooq.tables.records.AppUserRecord;
import au.org.raid.db.jooq.tables.records.ContributorPositionRecord;
import au.org.raid.db.jooq.tables.records.ContributorPositionSchemaRecord;
import au.org.raid.db.jooq.tables.records.ContributorRoleRecord;
import au.org.raid.db.jooq.tables.records.ContributorRoleSchemaRecord;
import au.org.raid.db.jooq.tables.records.DescriptionTypeRecord;
import au.org.raid.db.jooq.tables.records.DescriptionTypeSchemaRecord;
import au.org.raid.db.jooq.tables.records.FlywaySchemaHistoryRecord;
import au.org.raid.db.jooq.tables.records.LanguageRecord;
import au.org.raid.db.jooq.tables.records.LanguageSchemaRecord;
import au.org.raid.db.jooq.tables.records.OrganisationRoleRecord;
import au.org.raid.db.jooq.tables.records.OrganisationRoleSchemaRecord;
import au.org.raid.db.jooq.tables.records.RaidHistoryRecord;
import au.org.raid.db.jooq.tables.records.RaidRecord;
import au.org.raid.db.jooq.tables.records.RaidoOperatorRecord;
import au.org.raid.db.jooq.tables.records.RelatedObjectCategoryRecord;
import au.org.raid.db.jooq.tables.records.RelatedObjectCategorySchemaRecord;
import au.org.raid.db.jooq.tables.records.RelatedObjectTypeRecord;
import au.org.raid.db.jooq.tables.records.RelatedObjectTypeSchemaRecord;
import au.org.raid.db.jooq.tables.records.RelatedRaidTypeRecord;
import au.org.raid.db.jooq.tables.records.RelatedRaidTypeSchemaRecord;
import au.org.raid.db.jooq.tables.records.ServicePointRecord;
import au.org.raid.db.jooq.tables.records.SubjectTypeRecord;
import au.org.raid.db.jooq.tables.records.SubjectTypeSchemaRecord;
import au.org.raid.db.jooq.tables.records.TitleTypeRecord;
import au.org.raid.db.jooq.tables.records.TitleTypeSchemaRecord;
import au.org.raid.db.jooq.tables.records.TokenRecord;
import au.org.raid.db.jooq.tables.records.TraditionalKnowledgeLabelRecord;
import au.org.raid.db.jooq.tables.records.TraditionalKnowledgeLabelSchemaRecord;
import au.org.raid.db.jooq.tables.records.UserAuthzRequestRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * api_svc.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccessTypeRecord> ACCESS_TYPE_PKEY = Internal.createUniqueKey(AccessType.ACCESS_TYPE, DSL.name("access_type_pkey"), new TableField[] { AccessType.ACCESS_TYPE.SCHEMA_ID, AccessType.ACCESS_TYPE.URI }, true);
    public static final UniqueKey<AccessTypeSchemaRecord> ACCESS_TYPE_SCHEMA_PKEY = Internal.createUniqueKey(AccessTypeSchema.ACCESS_TYPE_SCHEMA, DSL.name("access_type_schema_pkey"), new TableField[] { AccessTypeSchema.ACCESS_TYPE_SCHEMA.ID }, true);
    public static final UniqueKey<AppUserRecord> APP_USER_PKEY = Internal.createUniqueKey(AppUser.APP_USER, DSL.name("app_user_pkey"), new TableField[] { AppUser.APP_USER.ID }, true);
    public static final UniqueKey<ContributorPositionRecord> CONTRIBUTOR_POSITION_PKEY = Internal.createUniqueKey(ContributorPosition.CONTRIBUTOR_POSITION, DSL.name("contributor_position_pkey"), new TableField[] { ContributorPosition.CONTRIBUTOR_POSITION.SCHEMA_ID, ContributorPosition.CONTRIBUTOR_POSITION.URI }, true);
    public static final UniqueKey<ContributorPositionSchemaRecord> CONTRIBUTOR_POSITION_SCHEMA_PKEY = Internal.createUniqueKey(ContributorPositionSchema.CONTRIBUTOR_POSITION_SCHEMA, DSL.name("contributor_position_schema_pkey"), new TableField[] { ContributorPositionSchema.CONTRIBUTOR_POSITION_SCHEMA.ID }, true);
    public static final UniqueKey<ContributorRoleRecord> CONTRIBUTOR_ROLE_PKEY = Internal.createUniqueKey(ContributorRole.CONTRIBUTOR_ROLE, DSL.name("contributor_role_pkey"), new TableField[] { ContributorRole.CONTRIBUTOR_ROLE.SCHEMA_ID, ContributorRole.CONTRIBUTOR_ROLE.URI }, true);
    public static final UniqueKey<ContributorRoleSchemaRecord> CONTRIBUTOR_ROLE_SCHEMA_PKEY = Internal.createUniqueKey(ContributorRoleSchema.CONTRIBUTOR_ROLE_SCHEMA, DSL.name("contributor_role_schema_pkey"), new TableField[] { ContributorRoleSchema.CONTRIBUTOR_ROLE_SCHEMA.ID }, true);
    public static final UniqueKey<DescriptionTypeRecord> DESCRIPTION_TYPE_PKEY = Internal.createUniqueKey(DescriptionType.DESCRIPTION_TYPE, DSL.name("description_type_pkey"), new TableField[] { DescriptionType.DESCRIPTION_TYPE.SCHEMA_ID, DescriptionType.DESCRIPTION_TYPE.URI }, true);
    public static final UniqueKey<DescriptionTypeSchemaRecord> DWSCRIPTION_TYPE_SCHEMA_PKEY = Internal.createUniqueKey(DescriptionTypeSchema.DESCRIPTION_TYPE_SCHEMA, DSL.name("dwscription_type_schema_pkey"), new TableField[] { DescriptionTypeSchema.DESCRIPTION_TYPE_SCHEMA.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<LanguageSchemaRecord> LANGUAGE_SCHEMA_PKEY = Internal.createUniqueKey(LanguageSchema.LANGUAGE_SCHEMA, DSL.name("language_schema_pkey"), new TableField[] { LanguageSchema.LANGUAGE_SCHEMA.ID }, true);
    public static final UniqueKey<OrganisationRoleRecord> ORGANISATION_ROLE_PKEY = Internal.createUniqueKey(OrganisationRole.ORGANISATION_ROLE, DSL.name("organisation_role_pkey"), new TableField[] { OrganisationRole.ORGANISATION_ROLE.SCHEMA_ID, OrganisationRole.ORGANISATION_ROLE.URI }, true);
    public static final UniqueKey<OrganisationRoleSchemaRecord> ORGANISATION_ROLE_SCHEMA_PKEY = Internal.createUniqueKey(OrganisationRoleSchema.ORGANISATION_ROLE_SCHEMA, DSL.name("organisation_role_schema_pkey"), new TableField[] { OrganisationRoleSchema.ORGANISATION_ROLE_SCHEMA.ID }, true);
    public static final UniqueKey<RaidRecord> RAID_PKEY = Internal.createUniqueKey(Raid.RAID, DSL.name("raid_pkey"), new TableField[] { Raid.RAID.HANDLE }, true);
    public static final UniqueKey<RaidHistoryRecord> RAID_HISTORY_PKEY = Internal.createUniqueKey(RaidHistory.RAID_HISTORY, DSL.name("raid_history_pkey"), new TableField[] { RaidHistory.RAID_HISTORY.HANDLE, RaidHistory.RAID_HISTORY.REVISION, RaidHistory.RAID_HISTORY.CHANGE_TYPE }, true);
    public static final UniqueKey<RaidoOperatorRecord> RAIDO_OPERATOR_PKEY = Internal.createUniqueKey(RaidoOperator.RAIDO_OPERATOR, DSL.name("raido_operator_pkey"), new TableField[] { RaidoOperator.RAIDO_OPERATOR.EMAIL }, true);
    public static final UniqueKey<RelatedObjectCategoryRecord> RELATED_OBJECT_CATEGORY_PKEY = Internal.createUniqueKey(RelatedObjectCategory.RELATED_OBJECT_CATEGORY, DSL.name("related_object_category_pkey"), new TableField[] { RelatedObjectCategory.RELATED_OBJECT_CATEGORY.SCHEMA_ID, RelatedObjectCategory.RELATED_OBJECT_CATEGORY.URI }, true);
    public static final UniqueKey<RelatedObjectCategorySchemaRecord> RELATED_OBJECT_CATEGORY_SCHEMA_PKEY = Internal.createUniqueKey(RelatedObjectCategorySchema.RELATED_OBJECT_CATEGORY_SCHEMA, DSL.name("related_object_category_schema_pkey"), new TableField[] { RelatedObjectCategorySchema.RELATED_OBJECT_CATEGORY_SCHEMA.ID }, true);
    public static final UniqueKey<RelatedObjectTypeRecord> RELATED_OBJECT_TYPE_NEW_PKEY = Internal.createUniqueKey(RelatedObjectType.RELATED_OBJECT_TYPE, DSL.name("related_object_type_new_pkey"), new TableField[] { RelatedObjectType.RELATED_OBJECT_TYPE.SCHEMA_ID, RelatedObjectType.RELATED_OBJECT_TYPE.URI }, true);
    public static final UniqueKey<RelatedObjectTypeSchemaRecord> RELATED_OBJECT_TYPE_SCHEMA_PKEY = Internal.createUniqueKey(RelatedObjectTypeSchema.RELATED_OBJECT_TYPE_SCHEMA, DSL.name("related_object_type_schema_pkey"), new TableField[] { RelatedObjectTypeSchema.RELATED_OBJECT_TYPE_SCHEMA.ID }, true);
    public static final UniqueKey<RelatedRaidTypeRecord> RELATED_RAID_TYPE_NEW_PKEY = Internal.createUniqueKey(RelatedRaidType.RELATED_RAID_TYPE, DSL.name("related_raid_type_new_pkey"), new TableField[] { RelatedRaidType.RELATED_RAID_TYPE.SCHEMA_ID, RelatedRaidType.RELATED_RAID_TYPE.URI }, true);
    public static final UniqueKey<RelatedRaidTypeSchemaRecord> RELATED_RAID_TYPE_SCHEMA_PKEY = Internal.createUniqueKey(RelatedRaidTypeSchema.RELATED_RAID_TYPE_SCHEMA, DSL.name("related_raid_type_schema_pkey"), new TableField[] { RelatedRaidTypeSchema.RELATED_RAID_TYPE_SCHEMA.ID }, true);
    public static final UniqueKey<ServicePointRecord> SERVICE_POINT_PKEY = Internal.createUniqueKey(ServicePoint.SERVICE_POINT, DSL.name("service_point_pkey"), new TableField[] { ServicePoint.SERVICE_POINT.ID }, true);
    public static final UniqueKey<ServicePointRecord> UNIQUE_NAME = Internal.createUniqueKey(ServicePoint.SERVICE_POINT, DSL.name("unique_name"), new TableField[] { ServicePoint.SERVICE_POINT.LOWER_NAME }, true);
    public static final UniqueKey<SubjectTypeRecord> SUBJECT_PKEY = Internal.createUniqueKey(SubjectType.SUBJECT_TYPE, DSL.name("subject_pkey"), new TableField[] { SubjectType.SUBJECT_TYPE.ID }, true);
    public static final UniqueKey<SubjectTypeSchemaRecord> SUBJECT_TYPE_SCHEMA_PKEY = Internal.createUniqueKey(SubjectTypeSchema.SUBJECT_TYPE_SCHEMA, DSL.name("subject_type_schema_pkey"), new TableField[] { SubjectTypeSchema.SUBJECT_TYPE_SCHEMA.ID }, true);
    public static final UniqueKey<TitleTypeRecord> TITLE_TYPE_PKEY = Internal.createUniqueKey(TitleType.TITLE_TYPE, DSL.name("title_type_pkey"), new TableField[] { TitleType.TITLE_TYPE.SCHEMA_ID, TitleType.TITLE_TYPE.URI }, true);
    public static final UniqueKey<TitleTypeSchemaRecord> TITLE_TYPE_SCHEMA_PKEY = Internal.createUniqueKey(TitleTypeSchema.TITLE_TYPE_SCHEMA, DSL.name("title_type_schema_pkey"), new TableField[] { TitleTypeSchema.TITLE_TYPE_SCHEMA.ID }, true);
    public static final UniqueKey<TokenRecord> TOKEN_PKEY = Internal.createUniqueKey(Token.TOKEN, DSL.name("token_pkey"), new TableField[] { Token.TOKEN.NAME, Token.TOKEN.ENVIRONMENT, Token.TOKEN.DATE_CREATED }, true);
    public static final UniqueKey<TraditionalKnowledgeLabelRecord> TRADITIONAL_KNOWLEDGE_LABEL_PKEY = Internal.createUniqueKey(TraditionalKnowledgeLabel.TRADITIONAL_KNOWLEDGE_LABEL, DSL.name("traditional_knowledge_label_pkey"), new TableField[] { TraditionalKnowledgeLabel.TRADITIONAL_KNOWLEDGE_LABEL.SCHEMA_ID, TraditionalKnowledgeLabel.TRADITIONAL_KNOWLEDGE_LABEL.URI }, true);
    public static final UniqueKey<TraditionalKnowledgeLabelSchemaRecord> TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA_PKEY = Internal.createUniqueKey(TraditionalKnowledgeLabelSchema.TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA, DSL.name("traditional_knowledge_label_schema_pkey"), new TableField[] { TraditionalKnowledgeLabelSchema.TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA.ID }, true);
    public static final UniqueKey<UserAuthzRequestRecord> USER_AUTHZ_REQUEST_PKEY = Internal.createUniqueKey(UserAuthzRequest.USER_AUTHZ_REQUEST, DSL.name("user_authz_request_pkey"), new TableField[] { UserAuthzRequest.USER_AUTHZ_REQUEST.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccessTypeRecord, AccessTypeSchemaRecord> ACCESS_TYPE__FK_ACCESS_TYPE_SCHEMA_ID = Internal.createForeignKey(AccessType.ACCESS_TYPE, DSL.name("fk_access_type_schema_id"), new TableField[] { AccessType.ACCESS_TYPE.SCHEMA_ID }, Keys.ACCESS_TYPE_SCHEMA_PKEY, new TableField[] { AccessTypeSchema.ACCESS_TYPE_SCHEMA.ID }, true);
    public static final ForeignKey<AppUserRecord, ServicePointRecord> APP_USER__APP_USER_SERVICE_POINT_ID_FKEY = Internal.createForeignKey(AppUser.APP_USER, DSL.name("app_user_service_point_id_fkey"), new TableField[] { AppUser.APP_USER.SERVICE_POINT_ID }, Keys.SERVICE_POINT_PKEY, new TableField[] { ServicePoint.SERVICE_POINT.ID }, true);
    public static final ForeignKey<ContributorPositionRecord, AccessTypeSchemaRecord> CONTRIBUTOR_POSITION__FK_CONTRIBUTOR_POSITION_SCHEMA_ID = Internal.createForeignKey(ContributorPosition.CONTRIBUTOR_POSITION, DSL.name("fk_contributor_position_schema_id"), new TableField[] { ContributorPosition.CONTRIBUTOR_POSITION.SCHEMA_ID }, Keys.ACCESS_TYPE_SCHEMA_PKEY, new TableField[] { AccessTypeSchema.ACCESS_TYPE_SCHEMA.ID }, true);
    public static final ForeignKey<ContributorRoleRecord, ContributorRoleSchemaRecord> CONTRIBUTOR_ROLE__FK_CONTRIBUTOR_ROLE_SCHEMA_ID = Internal.createForeignKey(ContributorRole.CONTRIBUTOR_ROLE, DSL.name("fk_contributor_role_schema_id"), new TableField[] { ContributorRole.CONTRIBUTOR_ROLE.SCHEMA_ID }, Keys.CONTRIBUTOR_ROLE_SCHEMA_PKEY, new TableField[] { ContributorRoleSchema.CONTRIBUTOR_ROLE_SCHEMA.ID }, true);
    public static final ForeignKey<DescriptionTypeRecord, DescriptionTypeSchemaRecord> DESCRIPTION_TYPE__FK_DESCRIPTION_TYPE_SCHEMA_ID = Internal.createForeignKey(DescriptionType.DESCRIPTION_TYPE, DSL.name("fk_description_type_schema_id"), new TableField[] { DescriptionType.DESCRIPTION_TYPE.SCHEMA_ID }, Keys.DWSCRIPTION_TYPE_SCHEMA_PKEY, new TableField[] { DescriptionTypeSchema.DESCRIPTION_TYPE_SCHEMA.ID }, true);
    public static final ForeignKey<LanguageRecord, LanguageSchemaRecord> LANGUAGE__FK_LANGUAGE_SCHEMA_ID = Internal.createForeignKey(Language.LANGUAGE, DSL.name("fk_language_schema_id"), new TableField[] { Language.LANGUAGE.SCHEMA_ID }, Keys.LANGUAGE_SCHEMA_PKEY, new TableField[] { LanguageSchema.LANGUAGE_SCHEMA.ID }, true);
    public static final ForeignKey<OrganisationRoleRecord, OrganisationRoleSchemaRecord> ORGANISATION_ROLE__FK_ORGANISATION_ROLE_SCHEMA_ID = Internal.createForeignKey(OrganisationRole.ORGANISATION_ROLE, DSL.name("fk_organisation_role_schema_id"), new TableField[] { OrganisationRole.ORGANISATION_ROLE.SCHEMA_ID }, Keys.ORGANISATION_ROLE_SCHEMA_PKEY, new TableField[] { OrganisationRoleSchema.ORGANISATION_ROLE_SCHEMA.ID }, true);
    public static final ForeignKey<RaidRecord, ServicePointRecord> RAID__RAID_SERVICE_POINT_ID_FKEY = Internal.createForeignKey(Raid.RAID, DSL.name("raid_service_point_id_fkey"), new TableField[] { Raid.RAID.SERVICE_POINT_ID }, Keys.SERVICE_POINT_PKEY, new TableField[] { ServicePoint.SERVICE_POINT.ID }, true);
    public static final ForeignKey<RelatedObjectCategoryRecord, RelatedObjectCategorySchemaRecord> RELATED_OBJECT_CATEGORY__FK_RELATED_OBJECT_CATEGORY_SCHEMA_ID = Internal.createForeignKey(RelatedObjectCategory.RELATED_OBJECT_CATEGORY, DSL.name("fk_related_object_category_schema_id"), new TableField[] { RelatedObjectCategory.RELATED_OBJECT_CATEGORY.SCHEMA_ID }, Keys.RELATED_OBJECT_CATEGORY_SCHEMA_PKEY, new TableField[] { RelatedObjectCategorySchema.RELATED_OBJECT_CATEGORY_SCHEMA.ID }, true);
    public static final ForeignKey<RelatedObjectTypeRecord, RelatedObjectTypeSchemaRecord> RELATED_OBJECT_TYPE__FK_RELATED_OBJECT_TYPE_SCHEMA_ID = Internal.createForeignKey(RelatedObjectType.RELATED_OBJECT_TYPE, DSL.name("fk_related_object_type_schema_id"), new TableField[] { RelatedObjectType.RELATED_OBJECT_TYPE.SCHEMA_ID }, Keys.RELATED_OBJECT_TYPE_SCHEMA_PKEY, new TableField[] { RelatedObjectTypeSchema.RELATED_OBJECT_TYPE_SCHEMA.ID }, true);
    public static final ForeignKey<RelatedRaidTypeRecord, RelatedRaidTypeSchemaRecord> RELATED_RAID_TYPE__FK_RELATED_RAID_TYPE_SCHEMA_ID = Internal.createForeignKey(RelatedRaidType.RELATED_RAID_TYPE, DSL.name("fk_related_raid_type_schema_id"), new TableField[] { RelatedRaidType.RELATED_RAID_TYPE.SCHEMA_ID }, Keys.RELATED_RAID_TYPE_SCHEMA_PKEY, new TableField[] { RelatedRaidTypeSchema.RELATED_RAID_TYPE_SCHEMA.ID }, true);
    public static final ForeignKey<SubjectTypeRecord, SubjectTypeSchemaRecord> SUBJECT_TYPE__FK_SUBJECT_TYPE_SCHEMA_ID = Internal.createForeignKey(SubjectType.SUBJECT_TYPE, DSL.name("fk_subject_type_schema_id"), new TableField[] { SubjectType.SUBJECT_TYPE.SCHEMA_ID }, Keys.SUBJECT_TYPE_SCHEMA_PKEY, new TableField[] { SubjectTypeSchema.SUBJECT_TYPE_SCHEMA.ID }, true);
    public static final ForeignKey<TitleTypeRecord, TitleTypeSchemaRecord> TITLE_TYPE__FK_TITLE_TYPE_SCHEMA_ID = Internal.createForeignKey(TitleType.TITLE_TYPE, DSL.name("fk_title_type_schema_id"), new TableField[] { TitleType.TITLE_TYPE.SCHEMA_ID }, Keys.TITLE_TYPE_SCHEMA_PKEY, new TableField[] { TitleTypeSchema.TITLE_TYPE_SCHEMA.ID }, true);
    public static final ForeignKey<TraditionalKnowledgeLabelRecord, TraditionalKnowledgeLabelSchemaRecord> TRADITIONAL_KNOWLEDGE_LABEL__FK_TRADITIONAL_KNOWLEDGE_LABEL_ID = Internal.createForeignKey(TraditionalKnowledgeLabel.TRADITIONAL_KNOWLEDGE_LABEL, DSL.name("fk_traditional_knowledge_label_id"), new TableField[] { TraditionalKnowledgeLabel.TRADITIONAL_KNOWLEDGE_LABEL.SCHEMA_ID }, Keys.TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA_PKEY, new TableField[] { TraditionalKnowledgeLabelSchema.TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA.ID }, true);
    public static final ForeignKey<UserAuthzRequestRecord, AppUserRecord> USER_AUTHZ_REQUEST__USER_AUTHZ_REQUEST_APPROVED_USER_FKEY = Internal.createForeignKey(UserAuthzRequest.USER_AUTHZ_REQUEST, DSL.name("user_authz_request_approved_user_fkey"), new TableField[] { UserAuthzRequest.USER_AUTHZ_REQUEST.APPROVED_USER }, Keys.APP_USER_PKEY, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<UserAuthzRequestRecord, AppUserRecord> USER_AUTHZ_REQUEST__USER_AUTHZ_REQUEST_RESPONDING_USER_FKEY = Internal.createForeignKey(UserAuthzRequest.USER_AUTHZ_REQUEST, DSL.name("user_authz_request_responding_user_fkey"), new TableField[] { UserAuthzRequest.USER_AUTHZ_REQUEST.RESPONDING_USER }, Keys.APP_USER_PKEY, new TableField[] { AppUser.APP_USER.ID }, true);
    public static final ForeignKey<UserAuthzRequestRecord, ServicePointRecord> USER_AUTHZ_REQUEST__USER_AUTHZ_REQUEST_SERVICE_POINT_ID_FKEY = Internal.createForeignKey(UserAuthzRequest.USER_AUTHZ_REQUEST, DSL.name("user_authz_request_service_point_id_fkey"), new TableField[] { UserAuthzRequest.USER_AUTHZ_REQUEST.SERVICE_POINT_ID }, Keys.SERVICE_POINT_PKEY, new TableField[] { ServicePoint.SERVICE_POINT.ID }, true);
}
