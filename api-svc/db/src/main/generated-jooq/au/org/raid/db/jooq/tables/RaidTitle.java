/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.RaidTitleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaidTitle extends TableImpl<RaidTitleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.raid_title</code>
     */
    public static final RaidTitle RAID_TITLE = new RaidTitle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidTitleRecord> getRecordType() {
        return RaidTitleRecord.class;
    }

    /**
     * The column <code>api_svc.raid_title.id</code>.
     */
    public final TableField<RaidTitleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.raid_title.raid_name</code>.
     */
    public final TableField<RaidTitleRecord, String> RAID_NAME = createField(DSL.name("raid_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_title.title_type_id</code>.
     */
    public final TableField<RaidTitleRecord, Integer> TITLE_TYPE_ID = createField(DSL.name("title_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_title.text</code>.
     */
    public final TableField<RaidTitleRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_title.language_id</code>.
     */
    public final TableField<RaidTitleRecord, Integer> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>api_svc.raid_title.start_date</code>.
     */
    public final TableField<RaidTitleRecord, String> START_DATE = createField(DSL.name("start_date"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_title.end_date</code>.
     */
    public final TableField<RaidTitleRecord, String> END_DATE = createField(DSL.name("end_date"), SQLDataType.VARCHAR, this, "");

    private RaidTitle(Name alias, Table<RaidTitleRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaidTitle(Name alias, Table<RaidTitleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.raid_title</code> table reference
     */
    public RaidTitle(String alias) {
        this(DSL.name(alias), RAID_TITLE);
    }

    /**
     * Create an aliased <code>api_svc.raid_title</code> table reference
     */
    public RaidTitle(Name alias) {
        this(alias, RAID_TITLE);
    }

    /**
     * Create a <code>api_svc.raid_title</code> table reference
     */
    public RaidTitle() {
        this(DSL.name("raid_title"), null);
    }

    public <O extends Record> RaidTitle(Table<O> child, ForeignKey<O, RaidTitleRecord> key) {
        super(child, key, RAID_TITLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<RaidTitleRecord, Integer> getIdentity() {
        return (Identity<RaidTitleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RaidTitleRecord> getPrimaryKey() {
        return Keys.RAID_TITLE_PKEY;
    }

    @Override
    public List<ForeignKey<RaidTitleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RAID_TITLE__FK_TITLE_RAID_NAME, Keys.RAID_TITLE__FK_TITLE_TYPE, Keys.RAID_TITLE__FK_TITLE_LANGUAGE_ID);
    }

    private transient Raid _raid;
    private transient TitleType _titleType;
    private transient Language _language;

    /**
     * Get the implicit join path to the <code>api_svc.raid</code> table.
     */
    public Raid raid() {
        if (_raid == null)
            _raid = new Raid(this, Keys.RAID_TITLE__FK_TITLE_RAID_NAME);

        return _raid;
    }

    /**
     * Get the implicit join path to the <code>api_svc.title_type</code> table.
     */
    public TitleType titleType() {
        if (_titleType == null)
            _titleType = new TitleType(this, Keys.RAID_TITLE__FK_TITLE_TYPE);

        return _titleType;
    }

    /**
     * Get the implicit join path to the <code>api_svc.language</code> table.
     */
    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.RAID_TITLE__FK_TITLE_LANGUAGE_ID);

        return _language;
    }

    @Override
    public RaidTitle as(String alias) {
        return new RaidTitle(DSL.name(alias), this);
    }

    @Override
    public RaidTitle as(Name alias) {
        return new RaidTitle(alias, this);
    }

    @Override
    public RaidTitle as(Table<?> alias) {
        return new RaidTitle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidTitle rename(String name) {
        return new RaidTitle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidTitle rename(Name name) {
        return new RaidTitle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidTitle rename(Table<?> name) {
        return new RaidTitle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, String, Integer, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
