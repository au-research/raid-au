/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.AccessTypeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessType extends TableImpl<AccessTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.access_type</code>
     */
    public static final AccessType ACCESS_TYPE = new AccessType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessTypeRecord> getRecordType() {
        return AccessTypeRecord.class;
    }

    /**
     * The column <code>api_svc.access_type.id</code>.
     */
    public final TableField<AccessTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.access_type.uri</code>.
     */
    public final TableField<AccessTypeRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.access_type.schema_id</code>.
     */
    public final TableField<AccessTypeRecord, Integer> SCHEMA_ID = createField(DSL.name("schema_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private AccessType(Name alias, Table<AccessTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessType(Name alias, Table<AccessTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.access_type</code> table reference
     */
    public AccessType(String alias) {
        this(DSL.name(alias), ACCESS_TYPE);
    }

    /**
     * Create an aliased <code>api_svc.access_type</code> table reference
     */
    public AccessType(Name alias) {
        this(alias, ACCESS_TYPE);
    }

    /**
     * Create a <code>api_svc.access_type</code> table reference
     */
    public AccessType() {
        this(DSL.name("access_type"), null);
    }

    public <O extends Record> AccessType(Table<O> child, ForeignKey<O, AccessTypeRecord> key) {
        super(child, key, ACCESS_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<AccessTypeRecord, Integer> getIdentity() {
        return (Identity<AccessTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccessTypeRecord> getPrimaryKey() {
        return Keys.ACCESS_TYPE_NEW_PKEY;
    }

    @Override
    public AccessType as(String alias) {
        return new AccessType(DSL.name(alias), this);
    }

    @Override
    public AccessType as(Name alias) {
        return new AccessType(alias, this);
    }

    @Override
    public AccessType as(Table<?> alias) {
        return new AccessType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessType rename(String name) {
        return new AccessType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessType rename(Name name) {
        return new AccessType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessType rename(Table<?> name) {
        return new AccessType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
