/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.RaidDescriptionRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaidDescription extends TableImpl<RaidDescriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.raid_description</code>
     */
    public static final RaidDescription RAID_DESCRIPTION = new RaidDescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidDescriptionRecord> getRecordType() {
        return RaidDescriptionRecord.class;
    }

    /**
     * The column <code>api_svc.raid_description.id</code>.
     */
    public final TableField<RaidDescriptionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.raid_description.handle</code>.
     */
    public final TableField<RaidDescriptionRecord, String> HANDLE = createField(DSL.name("handle"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_description.description_type_id</code>.
     */
    public final TableField<RaidDescriptionRecord, Integer> DESCRIPTION_TYPE_ID = createField(DSL.name("description_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_description.text</code>.
     */
    public final TableField<RaidDescriptionRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_description.language_id</code>.
     */
    public final TableField<RaidDescriptionRecord, Integer> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGER, this, "");

    private RaidDescription(Name alias, Table<RaidDescriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaidDescription(Name alias, Table<RaidDescriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.raid_description</code> table reference
     */
    public RaidDescription(String alias) {
        this(DSL.name(alias), RAID_DESCRIPTION);
    }

    /**
     * Create an aliased <code>api_svc.raid_description</code> table reference
     */
    public RaidDescription(Name alias) {
        this(alias, RAID_DESCRIPTION);
    }

    /**
     * Create a <code>api_svc.raid_description</code> table reference
     */
    public RaidDescription() {
        this(DSL.name("raid_description"), null);
    }

    public <O extends Record> RaidDescription(Table<O> child, ForeignKey<O, RaidDescriptionRecord> key) {
        super(child, key, RAID_DESCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<RaidDescriptionRecord, Integer> getIdentity() {
        return (Identity<RaidDescriptionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RaidDescriptionRecord> getPrimaryKey() {
        return Keys.RAID_DESCRIPTION_PKEY;
    }

    @Override
    public List<ForeignKey<RaidDescriptionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RAID_DESCRIPTION__RAID_DESCRIPTION_HANDLE_FKEY, Keys.RAID_DESCRIPTION__RAID_DESCRIPTION_DESCRIPTION_TYPE_ID_FKEY, Keys.RAID_DESCRIPTION__RAID_DESCRIPTION_LANGUAGE_ID_FKEY);
    }

    private transient Raid _raid;
    private transient DescriptionType _descriptionType;
    private transient Language _language;

    /**
     * Get the implicit join path to the <code>api_svc.raid</code> table.
     */
    public Raid raid() {
        if (_raid == null)
            _raid = new Raid(this, Keys.RAID_DESCRIPTION__RAID_DESCRIPTION_HANDLE_FKEY);

        return _raid;
    }

    /**
     * Get the implicit join path to the <code>api_svc.description_type</code>
     * table.
     */
    public DescriptionType descriptionType() {
        if (_descriptionType == null)
            _descriptionType = new DescriptionType(this, Keys.RAID_DESCRIPTION__RAID_DESCRIPTION_DESCRIPTION_TYPE_ID_FKEY);

        return _descriptionType;
    }

    /**
     * Get the implicit join path to the <code>api_svc.language</code> table.
     */
    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.RAID_DESCRIPTION__RAID_DESCRIPTION_LANGUAGE_ID_FKEY);

        return _language;
    }

    @Override
    public RaidDescription as(String alias) {
        return new RaidDescription(DSL.name(alias), this);
    }

    @Override
    public RaidDescription as(Name alias) {
        return new RaidDescription(alias, this);
    }

    @Override
    public RaidDescription as(Table<?> alias) {
        return new RaidDescription(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidDescription rename(String name) {
        return new RaidDescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidDescription rename(Name name) {
        return new RaidDescription(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidDescription rename(Table<?> name) {
        return new RaidDescription(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
