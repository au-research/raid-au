/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.TitleTypeRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TitleType extends TableImpl<TitleTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.title_type</code>
     */
    public static final TitleType TITLE_TYPE = new TitleType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitleTypeRecord> getRecordType() {
        return TitleTypeRecord.class;
    }

    /**
     * The column <code>api_svc.title_type.schema_id</code>.
     */
    public final TableField<TitleTypeRecord, Integer> SCHEMA_ID = createField(DSL.name("schema_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>api_svc.title_type.uri</code>.
     */
    public final TableField<TitleTypeRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR.nullable(false), this, "");

    private TitleType(Name alias, Table<TitleTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TitleType(Name alias, Table<TitleTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.title_type</code> table reference
     */
    public TitleType(String alias) {
        this(DSL.name(alias), TITLE_TYPE);
    }

    /**
     * Create an aliased <code>api_svc.title_type</code> table reference
     */
    public TitleType(Name alias) {
        this(alias, TITLE_TYPE);
    }

    /**
     * Create a <code>api_svc.title_type</code> table reference
     */
    public TitleType() {
        this(DSL.name("title_type"), null);
    }

    public <O extends Record> TitleType(Table<O> child, ForeignKey<O, TitleTypeRecord> key) {
        super(child, key, TITLE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public UniqueKey<TitleTypeRecord> getPrimaryKey() {
        return Keys.TITLE_TYPE_PKEY;
    }

    @Override
    public List<ForeignKey<TitleTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TITLE_TYPE__FK_TITLE_TYPE_SCHEMA_ID);
    }

    private transient TitleTypeSchema _titleTypeSchema;

    /**
     * Get the implicit join path to the <code>api_svc.title_type_schema</code>
     * table.
     */
    public TitleTypeSchema titleTypeSchema() {
        if (_titleTypeSchema == null)
            _titleTypeSchema = new TitleTypeSchema(this, Keys.TITLE_TYPE__FK_TITLE_TYPE_SCHEMA_ID);

        return _titleTypeSchema;
    }

    @Override
    public TitleType as(String alias) {
        return new TitleType(DSL.name(alias), this);
    }

    @Override
    public TitleType as(Name alias) {
        return new TitleType(alias, this);
    }

    @Override
    public TitleType as(Table<?> alias) {
        return new TitleType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleType rename(String name) {
        return new TitleType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleType rename(Name name) {
        return new TitleType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TitleType rename(Table<?> name) {
        return new TitleType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
