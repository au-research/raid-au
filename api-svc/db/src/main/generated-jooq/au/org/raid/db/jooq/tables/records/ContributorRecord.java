/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables.records;


import au.org.raid.db.jooq.tables.Contributor;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContributorRecord extends UpdatableRecordImpl<ContributorRecord> implements Record4<Integer, String, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>api_svc.contributor.id</code>.
     */
    public ContributorRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>api_svc.contributor.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>api_svc.contributor.pid</code>.
     */
    public ContributorRecord setPid(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>api_svc.contributor.pid</code>.
     */
    public String getPid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>api_svc.contributor.schema_id</code>.
     */
    public ContributorRecord setSchemaId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>api_svc.contributor.schema_id</code>.
     */
    public Integer getSchemaId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>api_svc.contributor.status</code>.
     */
    public ContributorRecord setStatus(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>api_svc.contributor.status</code>.
     */
    public String getStatus() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Integer, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Contributor.CONTRIBUTOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Contributor.CONTRIBUTOR.PID;
    }

    @Override
    public Field<Integer> field3() {
        return Contributor.CONTRIBUTOR.SCHEMA_ID;
    }

    @Override
    public Field<String> field4() {
        return Contributor.CONTRIBUTOR.STATUS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPid();
    }

    @Override
    public Integer component3() {
        return getSchemaId();
    }

    @Override
    public String component4() {
        return getStatus();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPid();
    }

    @Override
    public Integer value3() {
        return getSchemaId();
    }

    @Override
    public String value4() {
        return getStatus();
    }

    @Override
    public ContributorRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ContributorRecord value2(String value) {
        setPid(value);
        return this;
    }

    @Override
    public ContributorRecord value3(Integer value) {
        setSchemaId(value);
        return this;
    }

    @Override
    public ContributorRecord value4(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public ContributorRecord values(Integer value1, String value2, Integer value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContributorRecord
     */
    public ContributorRecord() {
        super(Contributor.CONTRIBUTOR);
    }

    /**
     * Create a detached, initialised ContributorRecord
     */
    public ContributorRecord(Integer id, String pid, Integer schemaId, String status) {
        super(Contributor.CONTRIBUTOR);

        setId(id);
        setPid(pid);
        setSchemaId(schemaId);
        setStatus(status);
    }
}
