/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.TraditionalKnowledgeLabelSchemaRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TraditionalKnowledgeLabelSchema extends TableImpl<TraditionalKnowledgeLabelSchemaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>api_svc.traditional_knowledge_label_schema</code>
     */
    public static final TraditionalKnowledgeLabelSchema TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA = new TraditionalKnowledgeLabelSchema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraditionalKnowledgeLabelSchemaRecord> getRecordType() {
        return TraditionalKnowledgeLabelSchemaRecord.class;
    }

    /**
     * The column <code>api_svc.traditional_knowledge_label_schema.id</code>.
     */
    public final TableField<TraditionalKnowledgeLabelSchemaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.traditional_knowledge_label_schema.uri</code>.
     */
    public final TableField<TraditionalKnowledgeLabelSchemaRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR.nullable(false), this, "");

    private TraditionalKnowledgeLabelSchema(Name alias, Table<TraditionalKnowledgeLabelSchemaRecord> aliased) {
        this(alias, aliased, null);
    }

    private TraditionalKnowledgeLabelSchema(Name alias, Table<TraditionalKnowledgeLabelSchemaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.traditional_knowledge_label_schema</code>
     * table reference
     */
    public TraditionalKnowledgeLabelSchema(String alias) {
        this(DSL.name(alias), TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA);
    }

    /**
     * Create an aliased <code>api_svc.traditional_knowledge_label_schema</code>
     * table reference
     */
    public TraditionalKnowledgeLabelSchema(Name alias) {
        this(alias, TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA);
    }

    /**
     * Create a <code>api_svc.traditional_knowledge_label_schema</code> table
     * reference
     */
    public TraditionalKnowledgeLabelSchema() {
        this(DSL.name("traditional_knowledge_label_schema"), null);
    }

    public <O extends Record> TraditionalKnowledgeLabelSchema(Table<O> child, ForeignKey<O, TraditionalKnowledgeLabelSchemaRecord> key) {
        super(child, key, TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<TraditionalKnowledgeLabelSchemaRecord, Integer> getIdentity() {
        return (Identity<TraditionalKnowledgeLabelSchemaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TraditionalKnowledgeLabelSchemaRecord> getPrimaryKey() {
        return Keys.TRADITIONAL_KNOWLEDGE_LABEL_SCHEMA_PKEY;
    }

    @Override
    public TraditionalKnowledgeLabelSchema as(String alias) {
        return new TraditionalKnowledgeLabelSchema(DSL.name(alias), this);
    }

    @Override
    public TraditionalKnowledgeLabelSchema as(Name alias) {
        return new TraditionalKnowledgeLabelSchema(alias, this);
    }

    @Override
    public TraditionalKnowledgeLabelSchema as(Table<?> alias) {
        return new TraditionalKnowledgeLabelSchema(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TraditionalKnowledgeLabelSchema rename(String name) {
        return new TraditionalKnowledgeLabelSchema(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraditionalKnowledgeLabelSchema rename(Name name) {
        return new TraditionalKnowledgeLabelSchema(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraditionalKnowledgeLabelSchema rename(Table<?> name) {
        return new TraditionalKnowledgeLabelSchema(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
