/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.tables;


import au.org.raid.db.jooq.ApiSvc;
import au.org.raid.db.jooq.Keys;
import au.org.raid.db.jooq.tables.records.RaidSubjectKeywordRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaidSubjectKeyword extends TableImpl<RaidSubjectKeywordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.raid_subject_keyword</code>
     */
    public static final RaidSubjectKeyword RAID_SUBJECT_KEYWORD = new RaidSubjectKeyword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidSubjectKeywordRecord> getRecordType() {
        return RaidSubjectKeywordRecord.class;
    }

    /**
     * The column <code>api_svc.raid_subject_keyword.id</code>.
     */
    public final TableField<RaidSubjectKeywordRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.raid_subject_keyword.raid_subject_id</code>.
     */
    public final TableField<RaidSubjectKeywordRecord, Integer> RAID_SUBJECT_ID = createField(DSL.name("raid_subject_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_subject_keyword.keyword</code>.
     */
    public final TableField<RaidSubjectKeywordRecord, String> KEYWORD = createField(DSL.name("keyword"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_subject_keyword.language_id</code>.
     */
    public final TableField<RaidSubjectKeywordRecord, Integer> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGER, this, "");

    private RaidSubjectKeyword(Name alias, Table<RaidSubjectKeywordRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaidSubjectKeyword(Name alias, Table<RaidSubjectKeywordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.raid_subject_keyword</code> table
     * reference
     */
    public RaidSubjectKeyword(String alias) {
        this(DSL.name(alias), RAID_SUBJECT_KEYWORD);
    }

    /**
     * Create an aliased <code>api_svc.raid_subject_keyword</code> table
     * reference
     */
    public RaidSubjectKeyword(Name alias) {
        this(alias, RAID_SUBJECT_KEYWORD);
    }

    /**
     * Create a <code>api_svc.raid_subject_keyword</code> table reference
     */
    public RaidSubjectKeyword() {
        this(DSL.name("raid_subject_keyword"), null);
    }

    public <O extends Record> RaidSubjectKeyword(Table<O> child, ForeignKey<O, RaidSubjectKeywordRecord> key) {
        super(child, key, RAID_SUBJECT_KEYWORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<RaidSubjectKeywordRecord, Integer> getIdentity() {
        return (Identity<RaidSubjectKeywordRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RaidSubjectKeywordRecord> getPrimaryKey() {
        return Keys.RAID_SUBJECT_KEYWORD_PKEY;
    }

    @Override
    public List<UniqueKey<RaidSubjectKeywordRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.RAID_SUBJECT_KEYWORD_RAID_SUBJECT_ID_KEYWORD_LANGUAGE_ID_KEY);
    }

    @Override
    public List<ForeignKey<RaidSubjectKeywordRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RAID_SUBJECT_KEYWORD__RAID_SUBJECT_KEYWORD_RAID_SUBJECT_ID_FKEY, Keys.RAID_SUBJECT_KEYWORD__RAID_SUBJECT_KEYWORD_LANGUAGE_ID_FKEY);
    }

    private transient RaidSubject _raidSubject;
    private transient Language _language;

    /**
     * Get the implicit join path to the <code>api_svc.raid_subject</code>
     * table.
     */
    public RaidSubject raidSubject() {
        if (_raidSubject == null)
            _raidSubject = new RaidSubject(this, Keys.RAID_SUBJECT_KEYWORD__RAID_SUBJECT_KEYWORD_RAID_SUBJECT_ID_FKEY);

        return _raidSubject;
    }

    /**
     * Get the implicit join path to the <code>api_svc.language</code> table.
     */
    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.RAID_SUBJECT_KEYWORD__RAID_SUBJECT_KEYWORD_LANGUAGE_ID_FKEY);

        return _language;
    }

    @Override
    public RaidSubjectKeyword as(String alias) {
        return new RaidSubjectKeyword(DSL.name(alias), this);
    }

    @Override
    public RaidSubjectKeyword as(Name alias) {
        return new RaidSubjectKeyword(alias, this);
    }

    @Override
    public RaidSubjectKeyword as(Table<?> alias) {
        return new RaidSubjectKeyword(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidSubjectKeyword rename(String name) {
        return new RaidSubjectKeyword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidSubjectKeyword rename(Name name) {
        return new RaidSubjectKeyword(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidSubjectKeyword rename(Table<?> name) {
        return new RaidSubjectKeyword(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
