plugins{
  id "groovy"
  alias(libs.plugins.flyway)
  alias(libs.plugins.jooq)
}

// to make sure it's properties are loaded before this project
evaluationDependsOn(':api-svc:db:shared')

ext{
  sharedProject = project(":api-svc:db:shared")
  
  raidV1PgSchema = "raid_v1_import"

  jooqGeneratedSrcDir = 'src/main/generated'

  /* prod machines will always be set to UTC, but developer machines are set 
  to whatever they want. */
  defaultSysProps = [
    'user.timezone': 'UTC',
    'file.encoding': 'UTF-8',
    raidV1PgSchema: raidV1PgSchema,
  ]
}

ext.defaultSysProps += sharedProject.properties.
  findAll{ it.key.startsWith("apiSvcPg") }

flyway{
  url = sharedProject.apiSvcPgUrl
  user = sharedProject.apiSvcPgUser
  password = sharedProject.apiSvcPgPassword
  schemas = [raidV1PgSchema]
  /* flag to avoid accidentally running in prod */
  cleanDisabled = sharedProject.flywayCleanDisabled
}

dependencies{
  implementation project(':api-svc:idl-raid-v2')
//  implementation libs.bundles.spring6
  implementation libs.bundles.springboot3

  // don't really care, whatever version Gradle is using will do
  implementation localGroovy()

  runtimeOnly libs.pgjdbc
  jooqGenerator libs.pgjdbc

  // used for migration code to call api-svc 
  implementation( 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.0'){
    exclude group: 'org.springframework.boot'
  }

  implementation 'org.jooq:jooq:3.18.0'
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3"
  
  // these were in api-svc somehow (transitively from spring?), 
  // but missing from this project
  implementation 'io.github.openfeign:feign-okhttp:12.0'
  implementation 'io.github.openfeign:feign-jackson:12.0'


  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

sourceSets{
  main.java{
    srcDirs += [jooqGeneratedSrcDir]
  }
  test.resources{
    /* This is so each test's resources are right next to the source.
    It also makes the src/test/resources directory redundant - might as well
    have properties, xml, etc. files under here. 
    There's no point in separating resource from code in the context of testing 
    (and little point for prod code in the general case, IMO). */
    srcDirs "src/test/groovy"
  }
}

testing{
  suites{
    /* "dev" code/sql, etc. is "scratch" stuff that is committed, but is not 
       production code, not real tests. Just WIP/temporary stuff, where the 
       usual standards don't apply (but still - no credentials!) */
    dev(JvmTestSuite){
      testType = TestSuiteType.INTEGRATION_TEST
      dependencies{
        implementation project()

        // doesn't work: No signature of method: build_999.testing() is applicable for argument types
        // implementation localGroovy()

        // copy/pasted from dependencies block - yuck :( 
        implementation 'org.codehaus.groovy:groovy-all:3.0.9'
      }
    }
  }
}
tasks.dev.description = "don't run this, it's just a Gradle default"

dev{
  useJUnitPlatform()
  systemProperties defaultSysProps
}

test{
  useJUnitPlatform()
  systemProperties defaultSysProps
}

task checkS3Files(type: JavaExec){
  group = "run"
  description = "Run CheckS3Files, outputs `error.json` files in PWD"
  classpath = sourceSets.main.runtimeClasspath
  setMainClass "raid.ddb_migration.CheckS3Files"
  workingDir rootProject.projectDir
  systemProperties defaultSysProps
}

task importS3Files(type: JavaExec){
  group = "run"
  description = "Run ImportS3Files - update table, write `error.json` in PWD"
  classpath = sourceSets.main.runtimeClasspath
  setMainClass "raid.ddb_migration.ImportS3Files"
  workingDir rootProject.projectDir
  systemProperties defaultSysProps
}

task import1Raid(type: JavaExec){
  group = "run"
  description = "Run Import1Raid"
  classpath = sourceSets.main.runtimeClasspath
  setMainClass "raid.v2_api_migration.Import1Raid"
  workingDir rootProject.projectDir
  systemProperties defaultSysProps
  systemProperties.apiSvcMigrationHost = sharedProject.apiSvcMigrationHost
  systemProperties.apiSvcMigrationKey = sharedProject.apiSvcMigrationKey
  
  doFirst {
    println "migrating data to raido system at: $systemProperties.apiSvcMigrationHost"
    assert systemProperties.apiSvcMigrationHost
    assert systemProperties.apiSvcMigrationKey
  }
}

task importAllRaids(type: JavaExec){
  group = "run"
  description = "Run ImportAllRaids"
  classpath = sourceSets.main.runtimeClasspath
  setMainClass "raid.v2_api_migration.ImportAllRaids"
  workingDir rootProject.projectDir
  systemProperties defaultSysProps
  systemProperties.apiSvcMigrationHost = sharedProject.apiSvcMigrationHost
  systemProperties.apiSvcMigrationKey = sharedProject.apiSvcMigrationKey
  
  doFirst {
    println "migrating data to raido system at: $systemProperties.apiSvcMigrationHost"
    assert systemProperties.apiSvcMigrationHost
    assert systemProperties.apiSvcMigrationKey
  }
}

task cleanJooqGeneratedSrc(type: Delete){
  group = "jooq"
  delete jooqGeneratedSrcDir
}

jooq{
  version = '3.18.0'
  configurations{
    main{  // name of the jOOQ configuration
      generateSchemaSourceOnCompilation = false

      generationTool{
        jdbc{
          driver = 'org.postgresql.Driver'
          url = sharedProject.apiSvcPgUrl
          user = sharedProject.apiSvcPgUser
          password = sharedProject.apiSvcPgPassword
        }
        generator{
          name = 'org.jooq.codegen.DefaultGenerator'
          database{
            name = 'org.jooq.meta.postgres.PostgresDatabase'
            inputSchema = raidV1PgSchema
          }
          generate{
            deprecated = false
            records = true
            immutablePojos = false
            fluentSetters = true
            globalTableReferences = false
          }
          target{
            // gets blown away by the clean task each it's run
            directory = jooqGeneratedSrcDir
            packageName = 'db.migration.jooq'
          }
        }
      }
    }
  }
}
tasks.generateJooq.dependsOn cleanJooqGeneratedSrc
tasks.compileJava.dependsOn generateJooq
