/*
 * This file is generated by jOOQ.
 */
package db.migration.jooq;


import db.migration.jooq.tables.AssociationIndex;
import db.migration.jooq.tables.FlywaySchemaHistory;
import db.migration.jooq.tables.Metadata;
import db.migration.jooq.tables.Raid;
import db.migration.jooq.tables.Token;
import db.migration.jooq.tables.records.AssociationIndexRecord;
import db.migration.jooq.tables.records.FlywaySchemaHistoryRecord;
import db.migration.jooq.tables.records.MetadataRecord;
import db.migration.jooq.tables.records.RaidRecord;
import db.migration.jooq.tables.records.TokenRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * raid_v1_import.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AssociationIndexRecord> ASSOCIATION_INDEX_PKEY = Internal.createUniqueKey(AssociationIndex.ASSOCIATION_INDEX, DSL.name("association_index_pkey"), new TableField[] { AssociationIndex.ASSOCIATION_INDEX.HANDLE }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<MetadataRecord> METADATA_PKEY = Internal.createUniqueKey(Metadata.METADATA, DSL.name("metadata_pkey"), new TableField[] { Metadata.METADATA.NAME, Metadata.METADATA.TYPE }, true);
    public static final UniqueKey<RaidRecord> RAID_PKEY = Internal.createUniqueKey(Raid.RAID, DSL.name("raid_pkey"), new TableField[] { Raid.RAID.HANDLE }, true);
    public static final UniqueKey<TokenRecord> TOKEN_PKEY = Internal.createUniqueKey(Token.TOKEN, DSL.name("token_pkey"), new TableField[] { Token.TOKEN.NAME, Token.TOKEN.ENVIRONMENT, Token.TOKEN.DATE_CREATED }, true);
}
