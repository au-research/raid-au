ext{
  apiSvcPgUrl = "jdbc:postgresql://localhost:7432/raido"
  apiSvcPgSchema = "api_svc"
  
  /*  This is a different user than what the api-svc uses, this user must 
  be able to create schemas, tables, etc. 
  In an AWS env, this is the RDS master user; locally, probably just 'postgres' 
  */
  apiSvcPgUser = 'postgres'
  apiSvcPgPassword = ""

  // non-prod, usually want to set `classpath:db/env/demo` in the .gradle file
  apiSvcExtraLocation = ""
  
  jooqGeneratedSrcDir = 'src/main/generated-jooq'
  jooqGeneratedPkg = 'raido.db.jooq'

  // the config loading config :/
  homeDir = System.properties['user.home']
  configPath = System.getProperty("RAIDOV2_APISVC_DB_CONFIG_PATH",
    "${homeDir}/.config/raido-v2/api-svc-db.gradle")
}

/* after ext{} block so that stuff is the default, and so the config
   can refer to those default values */
if( file(configPath).exists() ){
  println "loading config from: ${configPath}"
  /* never done config this way before, not entirely sure it's a good idea,
  probably a Bad Plan to a full turing-complete language for config */
  apply from: configPath
}
else {
  println "no file found at: ${configPath}"
}

