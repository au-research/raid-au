/*
 * This file is generated by jOOQ.
 */
package au.org.raid.db.jooq.api_svc.tables;


import au.org.raid.db.jooq.api_svc.ApiSvc;
import au.org.raid.db.jooq.api_svc.Keys;
import au.org.raid.db.jooq.api_svc.tables.records.SubjectTypeSchemeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubjectTypeScheme extends TableImpl<SubjectTypeSchemeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.subject_type_scheme</code>
     */
    public static final SubjectTypeScheme SUBJECT_TYPE_SCHEME = new SubjectTypeScheme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectTypeSchemeRecord> getRecordType() {
        return SubjectTypeSchemeRecord.class;
    }

    /**
     * The column <code>api_svc.subject_type_scheme.id</code>.
     */
    public final TableField<SubjectTypeSchemeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.subject_type_scheme.uri</code>.
     */
    public final TableField<SubjectTypeSchemeRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR.nullable(false), this, "");

    private SubjectTypeScheme(Name alias, Table<SubjectTypeSchemeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubjectTypeScheme(Name alias, Table<SubjectTypeSchemeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.subject_type_scheme</code> table
     * reference
     */
    public SubjectTypeScheme(String alias) {
        this(DSL.name(alias), SUBJECT_TYPE_SCHEME);
    }

    /**
     * Create an aliased <code>api_svc.subject_type_scheme</code> table
     * reference
     */
    public SubjectTypeScheme(Name alias) {
        this(alias, SUBJECT_TYPE_SCHEME);
    }

    /**
     * Create a <code>api_svc.subject_type_scheme</code> table reference
     */
    public SubjectTypeScheme() {
        this(DSL.name("subject_type_scheme"), null);
    }

    public <O extends Record> SubjectTypeScheme(Table<O> child, ForeignKey<O, SubjectTypeSchemeRecord> key) {
        super(child, key, SUBJECT_TYPE_SCHEME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<SubjectTypeSchemeRecord, Integer> getIdentity() {
        return (Identity<SubjectTypeSchemeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubjectTypeSchemeRecord> getPrimaryKey() {
        return Keys.SUBJECT_TYPE_SCHEME_PKEY;
    }

    @Override
    public SubjectTypeScheme as(String alias) {
        return new SubjectTypeScheme(DSL.name(alias), this);
    }

    @Override
    public SubjectTypeScheme as(Name alias) {
        return new SubjectTypeScheme(alias, this);
    }

    @Override
    public SubjectTypeScheme as(Table<?> alias) {
        return new SubjectTypeScheme(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectTypeScheme rename(String name) {
        return new SubjectTypeScheme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectTypeScheme rename(Name name) {
        return new SubjectTypeScheme(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectTypeScheme rename(Table<?> name) {
        return new SubjectTypeScheme(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
