/*
 * This file is generated by jOOQ.
 */
package raido.db.jooq.api_svc.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import raido.db.jooq.api_svc.ApiSvc;
import raido.db.jooq.api_svc.Keys;
import raido.db.jooq.api_svc.tables.records.ContributorRoleTypeSchemeRecord;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContributorRoleTypeScheme extends TableImpl<ContributorRoleTypeSchemeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>api_svc.contributor_role_type_scheme</code>
     */
    public static final ContributorRoleTypeScheme CONTRIBUTOR_ROLE_TYPE_SCHEME = new ContributorRoleTypeScheme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContributorRoleTypeSchemeRecord> getRecordType() {
        return ContributorRoleTypeSchemeRecord.class;
    }

    /**
     * The column <code>api_svc.contributor_role_type_scheme.id</code>.
     */
    public final TableField<ContributorRoleTypeSchemeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.contributor_role_type_scheme.uri</code>.
     */
    public final TableField<ContributorRoleTypeSchemeRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR.nullable(false), this, "");

    private ContributorRoleTypeScheme(Name alias, Table<ContributorRoleTypeSchemeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContributorRoleTypeScheme(Name alias, Table<ContributorRoleTypeSchemeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.contributor_role_type_scheme</code> table
     * reference
     */
    public ContributorRoleTypeScheme(String alias) {
        this(DSL.name(alias), CONTRIBUTOR_ROLE_TYPE_SCHEME);
    }

    /**
     * Create an aliased <code>api_svc.contributor_role_type_scheme</code> table
     * reference
     */
    public ContributorRoleTypeScheme(Name alias) {
        this(alias, CONTRIBUTOR_ROLE_TYPE_SCHEME);
    }

    /**
     * Create a <code>api_svc.contributor_role_type_scheme</code> table
     * reference
     */
    public ContributorRoleTypeScheme() {
        this(DSL.name("contributor_role_type_scheme"), null);
    }

    public <O extends Record> ContributorRoleTypeScheme(Table<O> child, ForeignKey<O, ContributorRoleTypeSchemeRecord> key) {
        super(child, key, CONTRIBUTOR_ROLE_TYPE_SCHEME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<ContributorRoleTypeSchemeRecord, Integer> getIdentity() {
        return (Identity<ContributorRoleTypeSchemeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContributorRoleTypeSchemeRecord> getPrimaryKey() {
        return Keys.CONTRIBUTOR_ROLE_TYPE_SCHEME_PKEY;
    }

    @Override
    public ContributorRoleTypeScheme as(String alias) {
        return new ContributorRoleTypeScheme(DSL.name(alias), this);
    }

    @Override
    public ContributorRoleTypeScheme as(Name alias) {
        return new ContributorRoleTypeScheme(alias, this);
    }

    @Override
    public ContributorRoleTypeScheme as(Table<?> alias) {
        return new ContributorRoleTypeScheme(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContributorRoleTypeScheme rename(String name) {
        return new ContributorRoleTypeScheme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContributorRoleTypeScheme rename(Name name) {
        return new ContributorRoleTypeScheme(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContributorRoleTypeScheme rename(Table<?> name) {
        return new ContributorRoleTypeScheme(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
