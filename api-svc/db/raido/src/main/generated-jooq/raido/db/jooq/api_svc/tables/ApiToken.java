/*
 * This file is generated by jOOQ.
 */
package raido.db.jooq.api_svc.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import raido.db.jooq.api_svc.ApiSvc;
import raido.db.jooq.api_svc.Keys;
import raido.db.jooq.api_svc.tables.records.ApiTokenRecord;


/**
 * the id is used in the token generated, as well as issued and expiry, but the
 *   token itself is not stored
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiToken extends TableImpl<ApiTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.api_token</code>
     */
    public static final ApiToken API_TOKEN = new ApiToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiTokenRecord> getRecordType() {
        return ApiTokenRecord.class;
    }

    /**
     * The column <code>api_svc.api_token.id</code>.
     */
    public final TableField<ApiTokenRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_svc.api_token.expiry</code>.
     */
    public final TableField<ApiTokenRecord, LocalDateTime> EXPIRY = createField(DSL.name("expiry"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("transaction_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>api_svc.api_token.service_point_id</code>.
     */
    public final TableField<ApiTokenRecord, Long> SERVICE_POINT_ID = createField(DSL.name("service_point_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>api_svc.api_token.description</code>.
     */
    public final TableField<ApiTokenRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>api_svc.api_token.date_created</code>.
     */
    public final TableField<ApiTokenRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("transaction_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private ApiToken(Name alias, Table<ApiTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiToken(Name alias, Table<ApiTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("the id is used in the token generated, as well as issued and expiry, but the\r\n  token itself is not stored"), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.api_token</code> table reference
     */
    public ApiToken(String alias) {
        this(DSL.name(alias), API_TOKEN);
    }

    /**
     * Create an aliased <code>api_svc.api_token</code> table reference
     */
    public ApiToken(Name alias) {
        this(alias, API_TOKEN);
    }

    /**
     * Create a <code>api_svc.api_token</code> table reference
     */
    public ApiToken() {
        this(DSL.name("api_token"), null);
    }

    public <O extends Record> ApiToken(Table<O> child, ForeignKey<O, ApiTokenRecord> key) {
        super(child, key, API_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public Identity<ApiTokenRecord, Long> getIdentity() {
        return (Identity<ApiTokenRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApiTokenRecord> getPrimaryKey() {
        return Keys.API_TOKEN_PKEY;
    }

    @Override
    public List<ForeignKey<ApiTokenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.API_TOKEN__API_TOKEN_SERVICE_POINT_ID_FKEY);
    }

    private transient ServicePoint _servicePoint;

    /**
     * Get the implicit join path to the <code>api_svc.service_point</code>
     * table.
     */
    public ServicePoint servicePoint() {
        if (_servicePoint == null)
            _servicePoint = new ServicePoint(this, Keys.API_TOKEN__API_TOKEN_SERVICE_POINT_ID_FKEY);

        return _servicePoint;
    }

    @Override
    public ApiToken as(String alias) {
        return new ApiToken(DSL.name(alias), this);
    }

    @Override
    public ApiToken as(Name alias) {
        return new ApiToken(alias, this);
    }

    @Override
    public ApiToken as(Table<?> alias) {
        return new ApiToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiToken rename(String name) {
        return new ApiToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiToken rename(Name name) {
        return new ApiToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiToken rename(Table<?> name) {
        return new ApiToken(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, Long, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDateTime, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDateTime, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
