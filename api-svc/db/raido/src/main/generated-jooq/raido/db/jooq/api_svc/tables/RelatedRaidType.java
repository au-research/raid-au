/*
 * This file is generated by jOOQ.
 */
package raido.db.jooq.api_svc.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import raido.db.jooq.api_svc.ApiSvc;
import raido.db.jooq.api_svc.Keys;
import raido.db.jooq.api_svc.tables.records.RelatedRaidTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelatedRaidType extends TableImpl<RelatedRaidTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.related_raid_type</code>
     */
    public static final RelatedRaidType RELATED_RAID_TYPE = new RelatedRaidType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelatedRaidTypeRecord> getRecordType() {
        return RelatedRaidTypeRecord.class;
    }

    /**
     * The column <code>api_svc.related_raid_type.name</code>.
     */
    public final TableField<RelatedRaidTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>api_svc.related_raid_type.description</code>.
     */
    public final TableField<RelatedRaidTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>api_svc.related_raid_type.url</code>.
     */
    public final TableField<RelatedRaidTypeRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private RelatedRaidType(Name alias, Table<RelatedRaidTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RelatedRaidType(Name alias, Table<RelatedRaidTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.related_raid_type</code> table reference
     */
    public RelatedRaidType(String alias) {
        this(DSL.name(alias), RELATED_RAID_TYPE);
    }

    /**
     * Create an aliased <code>api_svc.related_raid_type</code> table reference
     */
    public RelatedRaidType(Name alias) {
        this(alias, RELATED_RAID_TYPE);
    }

    /**
     * Create a <code>api_svc.related_raid_type</code> table reference
     */
    public RelatedRaidType() {
        this(DSL.name("related_raid_type"), null);
    }

    public <O extends Record> RelatedRaidType(Table<O> child, ForeignKey<O, RelatedRaidTypeRecord> key) {
        super(child, key, RELATED_RAID_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public UniqueKey<RelatedRaidTypeRecord> getPrimaryKey() {
        return Keys.RELATED_RAID_TYPE_PKEY;
    }

    @Override
    public RelatedRaidType as(String alias) {
        return new RelatedRaidType(DSL.name(alias), this);
    }

    @Override
    public RelatedRaidType as(Name alias) {
        return new RelatedRaidType(alias, this);
    }

    @Override
    public RelatedRaidType as(Table<?> alias) {
        return new RelatedRaidType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RelatedRaidType rename(String name) {
        return new RelatedRaidType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelatedRaidType rename(Name name) {
        return new RelatedRaidType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelatedRaidType rename(Table<?> name) {
        return new RelatedRaidType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
