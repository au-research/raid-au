/*
 * This file is generated by jOOQ.
 */
package raido.db.jooq.api_svc.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import raido.db.jooq.api_svc.ApiSvc;
import raido.db.jooq.api_svc.Keys;
import raido.db.jooq.api_svc.tables.records.RaidV2Record;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaidV2 extends TableImpl<RaidV2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_svc.raid_v2</code>
     */
    public static final RaidV2 RAID_V2 = new RaidV2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaidV2Record> getRecordType() {
        return RaidV2Record.class;
    }

    /**
     * The column <code>api_svc.raid_v2.handle</code>.
     */
    public final TableField<RaidV2Record, String> HANDLE = createField(DSL.name("handle"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_v2.service_point_id</code>.
     */
    public final TableField<RaidV2Record, Long> SERVICE_POINT_ID = createField(DSL.name("service_point_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_v2.url</code>. The value that we set as the
     * `URL` property via ARDC APIDS.
     *   Example: `https://demo.raido-infra.com/raid/123.456/789`. 
     *   The global handle regisrty url (e.g.
     * `https://hdl.handle.net/123.456/789`) 
     *   will redirect to this value.
     */
    public final TableField<RaidV2Record, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(512).nullable(false), this, "The value that we set as the `URL` property via ARDC APIDS.\r\n  Example: `https://demo.raido-infra.com/raid/123.456/789`. \r\n  The global handle regisrty url (e.g. `https://hdl.handle.net/123.456/789`) \r\n  will redirect to this value.");

    /**
     * The column <code>api_svc.raid_v2.url_index</code>. The `index` of the URL
     * property in APIDS. This can be different if we change
     *   how we mint URL values via APIDS.
     */
    public final TableField<RaidV2Record, Integer> URL_INDEX = createField(DSL.name("url_index"), SQLDataType.INTEGER.nullable(false), this, "The `index` of the URL property in APIDS. This can be different if we change\r\n  how we mint URL values via APIDS.");

    /**
     * The column <code>api_svc.raid_v2.primary_title</code>.
     */
    public final TableField<RaidV2Record, String> PRIMARY_TITLE = createField(DSL.name("primary_title"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_v2.confidential</code>.
     */
    public final TableField<RaidV2Record, Boolean> CONFIDENTIAL = createField(DSL.name("confidential"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_v2.metadata_schema</code>. Identifies the
     * structure of the data in the metadata column
     */
    public final TableField<RaidV2Record, String> METADATA_SCHEMA = createField(DSL.name("metadata_schema"), SQLDataType.VARCHAR(256).nullable(false), this, "Identifies the structure of the data in the metadata column");

    /**
     * The column <code>api_svc.raid_v2.metadata</code>.
     */
    public final TableField<RaidV2Record, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>api_svc.raid_v2.start_date</code>.
     */
    public final TableField<RaidV2Record, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("transaction_timestamp()", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>api_svc.raid_v2.date_created</code>.
     */
    public final TableField<RaidV2Record, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("transaction_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private RaidV2(Name alias, Table<RaidV2Record> aliased) {
        this(alias, aliased, null);
    }

    private RaidV2(Name alias, Table<RaidV2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_svc.raid_v2</code> table reference
     */
    public RaidV2(String alias) {
        this(DSL.name(alias), RAID_V2);
    }

    /**
     * Create an aliased <code>api_svc.raid_v2</code> table reference
     */
    public RaidV2(Name alias) {
        this(alias, RAID_V2);
    }

    /**
     * Create a <code>api_svc.raid_v2</code> table reference
     */
    public RaidV2() {
        this(DSL.name("raid_v2"), null);
    }

    public <O extends Record> RaidV2(Table<O> child, ForeignKey<O, RaidV2Record> key) {
        super(child, key, RAID_V2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiSvc.API_SVC;
    }

    @Override
    public UniqueKey<RaidV2Record> getPrimaryKey() {
        return Keys.RAID_V2_PKEY;
    }

    @Override
    public List<ForeignKey<RaidV2Record, ?>> getReferences() {
        return Arrays.asList(Keys.RAID_V2__RAID_V2_SERVICE_POINT_ID_FKEY);
    }

    private transient ServicePoint _servicePoint;

    /**
     * Get the implicit join path to the <code>api_svc.service_point</code>
     * table.
     */
    public ServicePoint servicePoint() {
        if (_servicePoint == null)
            _servicePoint = new ServicePoint(this, Keys.RAID_V2__RAID_V2_SERVICE_POINT_ID_FKEY);

        return _servicePoint;
    }

    @Override
    public RaidV2 as(String alias) {
        return new RaidV2(DSL.name(alias), this);
    }

    @Override
    public RaidV2 as(Name alias) {
        return new RaidV2(alias, this);
    }

    @Override
    public RaidV2 as(Table<?> alias) {
        return new RaidV2(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidV2 rename(String name) {
        return new RaidV2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidV2 rename(Name name) {
        return new RaidV2(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaidV2 rename(Table<?> name) {
        return new RaidV2(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, Long, String, Integer, String, Boolean, String, JSONB, LocalDate, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super Long, ? super String, ? super Integer, ? super String, ? super Boolean, ? super String, ? super JSONB, ? super LocalDate, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super Long, ? super String, ? super Integer, ? super String, ? super Boolean, ? super String, ? super JSONB, ? super LocalDate, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
