/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FailureResponse
 */
export interface FailureResponse {
    /**
     * 
     * @type {string}
     * @memberof FailureResponse
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof FailureResponse
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof FailureResponse
     */
    status: number;
    /**
     * 
     * @type {string}
     * @memberof FailureResponse
     */
    detail: string;
    /**
     * 
     * @type {string}
     * @memberof FailureResponse
     */
    instance: string;
}

/**
 * Check if a given object implements the FailureResponse interface.
 */
export function instanceOfFailureResponse(value: object): value is FailureResponse {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('detail' in value) || value['detail'] === undefined) return false;
    if (!('instance' in value) || value['instance'] === undefined) return false;
    return true;
}

export function FailureResponseFromJSON(json: any): FailureResponse {
    return FailureResponseFromJSONTyped(json, false);
}

export function FailureResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FailureResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'status': json['status'],
        'detail': json['detail'],
        'instance': json['instance'],
    };
}

  export function FailureResponseToJSON(json: any): FailureResponse {
      return FailureResponseToJSONTyped(json, false);
  }

  export function FailureResponseToJSONTyped(value?: FailureResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'title': value['title'],
        'status': value['status'],
        'detail': value['detail'],
        'instance': value['instance'],
    };
}

