import raido.GitUtil
import raido.TimingListener

plugins {
  id 'base'
}

ext {
  versionEnvName = "RAIDO_PROJECT_VERSION"
  gitCommitHash = GitUtil.fullCommitHash(ext.versionEnvName)
}

/* Project version drives things like:
• values in the /public/version endpoint, and via this, the link to the 
  Github version on the "About" page
• docker image tag 

This sets the project version using the "git describe" command, working off
of the latest tag that matches "raido-v-*". 
Set env variable RAIDO_PROJECT_VERSION to something if running in an 
environment where Git is unavailable (e.g. AWS CodePipeline that works off of 
the .zip file instead of doing a clone).

If you're working without Git and don't know what version you're building and 
just really want to get Gradle running, set the value to "unknown" or something.  

To tag a new version, invoke: 
`git tag --annotate raido-v-<version> <COMMITHASH> -m "manual tag"`
eg: `git tag --annotate raido-v-0.9 29567130 -m "manual tag"`
Dont' forget to make sure you push the tag to Github, something like:
`git push --follow-tags`  (I've never done this, I use IDEA).
*/
version = GitUtil.describe("raido-v-", ext.versionEnvName)
println "project version: $version"

// to upgrade the wrapper, change the version and run this task
tasks.named('wrapper') {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = '7.6'
}

repositories {
}

configurations {
}

dependencies {
}

clean {
}

// prints out timings for task execution, just for observability
gradle.addListener new TimingListener()

// you can also show the project version by running `gradlew properties`
task showVersion{
  group "build"
  description "prints the project version, usually populated from Git tag refs"
  doFirst{
    println project.version
    println project.ext.gitCommitHash as String
  }
}

